{
  "name": "ElevenLabs with Proven Cloudinary Upload Method",
  "nodes": [
    {
      "parameters": {},
      "id": "start-node",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "voice-victor",
              "name": "victorVoiceId",
              "value": "T9xTMubBGC4Y9y6oHUza",
              "type": "string"
            },
            {
              "id": "test-text",
              "name": "text",
              "value": "This is a test of the ElevenLabs voice generation system with the proven Cloudinary upload method. This uses the exact same approach as the working ACG workflow.",
              "type": "string"
            },
            {
              "id": "cloudinary-cloud-name",
              "name": "cloudName",
              "value": "dly199qqv",
              "type": "string"
            },
            {
              "id": "upload-preset",
              "name": "uploadPreset",
              "value": "n8n_unsigned",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "set-config",
      "name": "Set Configuration",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [450, 300]
    },
    {
      "parameters": {
        "jsCode": "console.log('üöÄ PROVEN CLOUDINARY UPLOAD METHOD');\nconsole.log('‚úÖ Using exact method from working ACG workflow');\nconsole.log('‚òÅÔ∏è Cloud name:', $input.item.json.cloudName);\nconsole.log('üìã Upload preset:', $input.item.json.uploadPreset);\nconsole.log('');\nconsole.log('üîß KEY DIFFERENCES FROM PREVIOUS ATTEMPTS:');\nconsole.log('‚Ä¢ Using /auto/upload endpoint (not /video/upload)');\nconsole.log('‚Ä¢ Using formBinaryData (not base64 encoding)');\nconsole.log('‚Ä¢ Only upload_preset needed (no authentication)');\nconsole.log('‚Ä¢ No signature calculation required');\nconsole.log('‚Ä¢ No Authorization headers');\nconsole.log('');\nconsole.log('‚ú® This is the proven working method!');\n\nreturn $input.all();"
      },
      "id": "log-setup",
      "name": "Log Setup Info",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.elevenlabs.io/v1/text-to-speech/{{ $json.victorVoiceId }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"text\": {{ JSON.stringify($json.text) }},\n  \"model_id\": \"eleven_monolingual_v1\",\n  \"voice_settings\": {\n    \"stability\": 0.5,\n    \"similarity_boost\": 0.5,\n    \"style\": 0.0,\n    \"use_speaker_boost\": true\n  }\n}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          },
          "timeout": 30000
        }
      },
      "id": "generate-audio",
      "name": "Generate Audio",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [850, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "elevenlabs_api_credential",
          "name": "ElevenLabs API Key"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "success-check",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-audio-success",
      "name": "Check Audio Generation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "jsCode": "console.log('üéµ Audio generated successfully');\nconsole.log('üì¶ Binary data available:', $input.item.binary.data ? 'YES' : 'NO');\nconsole.log('üîÑ Ready for Cloudinary upload using proven method');\nconsole.log('');\nconsole.log('üìù UPLOAD DETAILS:');\nconsole.log('‚Ä¢ Endpoint: /auto/upload (automatic resource type detection)');\nconsole.log('‚Ä¢ Method: formBinaryData (direct binary, no base64)');\nconsole.log('‚Ä¢ Auth: upload_preset only (no signatures needed)');\n\nreturn $input.all();"
      },
      "id": "log-audio-ready",
      "name": "Log Audio Ready",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 240]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.cloudinary.com/v1_1/{{ $json.cloudName }}/auto/upload",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            },
            {
              "name": "upload_preset",
              "value": "={{ $json.uploadPreset }}"
            }
          ]
        },
        "options": {
          "timeout": 60000
        }
      },
      "id": "upload-proven-method",
      "name": "Upload with Proven Method",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1450, 240],
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "upload-success-check",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-upload-success",
      "name": "Check Upload Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1650, 240]
    },
    {
      "parameters": {
        "jsCode": "const uploadResult = $input.item.json;\nconst secureUrl = uploadResult.secure_url;\nconst publicId = uploadResult.public_id;\nconst resourceType = uploadResult.resource_type;\nconst format = uploadResult.format;\nconst bytes = uploadResult.bytes;\nconst duration = uploadResult.duration;\n\nconsole.log('üéâ SUCCESS! PROVEN METHOD WORKS!');\nconsole.log('=' .repeat(50));\nconsole.log('‚úÖ Audio uploaded to Cloudinary successfully');\nconsole.log('');\nconsole.log('üìä UPLOAD DETAILS:');\nconsole.log('üîó Secure URL:', secureUrl);\nconsole.log('üÜî Public ID:', publicId);\nconsole.log('üìù Resource Type:', resourceType);\nconsole.log('üéµ Format:', format);\nconsole.log('üì¶ File Size:', Math.round(bytes / 1024) + ' KB');\nif (duration) {\n  console.log('‚è±Ô∏è Duration:', Math.round(duration) + ' seconds');\n}\n\nconsole.log('');\nconsole.log('üéØ METHOD USED:');\nconsole.log('‚úÖ Endpoint: /auto/upload (proven working)');\nconsole.log('‚úÖ Binary upload: formBinaryData (no base64)');\nconsole.log('‚úÖ Authentication: upload_preset only');\nconsole.log('‚úÖ No signatures: Simple and secure');\n\nconsole.log('');\nconsole.log('üîÑ AVAILABLE FORMATS:');\nconst mp3Url = secureUrl.replace(/\\.(\\w+)$/, '.mp3').replace('/upload/', '/upload/f_mp3/');\nconsole.log('‚Ä¢ Original:', secureUrl);\nconsole.log('‚Ä¢ MP3:', mp3Url);\n\nconsole.log('');\nconsole.log('‚ú® INTEGRATION SUCCESS:');\nconsole.log('‚úÖ ElevenLabs API: Working');\nconsole.log('‚úÖ Cloudinary Upload: Working');\nconsole.log('‚úÖ Proven Method: Confirmed');\nconsole.log('‚úÖ CDN URLs: Generated');\nconsole.log('');\nconsole.log('üéä PROBLEM SOLVED!');\nconsole.log('The working ACG method was the key!');\n\nreturn [{\n  json: {\n    success: true,\n    method: 'PROVEN_ACG_METHOD',\n    message: 'Cloudinary upload successful using proven working method',\n    secureUrl: secureUrl,\n    mp3Url: mp3Url,\n    publicId: publicId,\n    resourceType: resourceType,\n    format: format,\n    fileSize: Math.round(bytes / 1024) + ' KB',\n    duration: duration ? Math.round(duration) + 's' : 'N/A',\n    uploadMethod: '/auto/upload with formBinaryData and upload_preset',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "log-proven-success",
      "name": "Log Proven Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1850, 180]
    },
    {
      "parameters": {
        "jsCode": "const error = $input.item.json.error || {};\nconst statusCode = error.httpCode || 'unknown';\nconst message = error.message || 'Unknown error';\n\nconsole.error('‚ùå AUDIO GENERATION FAILED');\nconsole.error('Status:', statusCode);\nconsole.error('Message:', message);\n\nif (statusCode === 401) {\n  console.error('üîë Check ElevenLabs API credential');\n} else if (statusCode === 429) {\n  console.error('‚è±Ô∏è Rate limit exceeded');\n}\n\nreturn [{ json: { success: false, error: message, stage: 'audio_generation' } }];"
      },
      "id": "log-audio-error",
      "name": "Log Audio Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 360]
    },
    {
      "parameters": {
        "jsCode": "const error = $input.item.json.error || {};\nconst statusCode = error.httpCode || 'unknown';\nconst message = error.message || 'Cloudinary upload failed';\n\nconsole.error('‚ùå PROVEN METHOD UPLOAD FAILED');\nconsole.error('Status:', statusCode);\nconsole.error('Message:', message);\nconsole.error('');\n\nif (statusCode === 401) {\n  if (message.includes('cloud_name is disabled')) {\n    console.error('üö® ACCOUNT STILL DISABLED');\n    console.error('Even the proven method cannot work with disabled account');\n    console.error('This confirms it is 100% an account issue, not code issue');\n    console.error('');\n    console.error('üîß IMMEDIATE ACTION:');\n    console.error('‚Ä¢ Contact Cloudinary support urgently');\n    console.error('‚Ä¢ Request immediate account reactivation');\n    console.error('‚Ä¢ Provide this error log as proof');\n    console.error('‚Ä¢ Ask for escalation if needed');\n  } else {\n    console.error('üîë Authentication error with upload preset');\n    console.error('Check that upload preset exists and is enabled');\n  }\n} else if (statusCode === 400) {\n  if (message.includes('Upload preset must be specified')) {\n    console.error('üìã UPLOAD PRESET ERROR');\n    console.error('Preset name may be incorrect or not exist');\n    console.error('Current preset:', $input.first().json.uploadPreset);\n    console.error('');\n    console.error('üîß FIXES:');\n    console.error('1. Verify preset exists in Cloudinary dashboard');\n    console.error('2. Check preset name is exactly correct (case sensitive)');\n    console.error('3. Ensure preset signing mode is \"Unsigned\"');\n    console.error('4. Confirm preset is \"Enabled\"');\n  } else {\n    console.error('üìù Bad request:', message);\n  }\n} else if (statusCode === 403) {\n  console.error('üö´ Forbidden - account restrictions');\n} else if (statusCode === 500) {\n  console.error('üîß Cloudinary server error');\n}\n\nconsole.error('');\nconsole.error('üìä PROVEN METHOD ANALYSIS:');\nconsole.error('‚Ä¢ This method works in ACG workflow');\nconsole.error('‚Ä¢ Same code, different result = account issue');\nconsole.error('‚Ä¢ Not a coding problem');\nconsole.error('‚Ä¢ Cloudinary account needs attention');\n\nreturn [{\n  json: {\n    success: false,\n    error: message,\n    statusCode: statusCode,\n    stage: 'proven_method_upload',\n    method: '/auto/upload with formBinaryData',\n    uploadPreset: $input.first().json.uploadPreset,\n    recommendation: statusCode === 401 && message.includes('cloud_name is disabled') ?\n      'Account disabled - escalate support ticket immediately' :\n      'Check upload preset configuration in Cloudinary dashboard'\n  }\n}];"
      },
      "id": "log-proven-error",
      "name": "Log Proven Method Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1850, 300]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Set Configuration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Configuration": {
      "main": [
        [
          {
            "node": "Log Setup Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Setup Info": {
      "main": [
        [
          {
            "node": "Generate Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Audio": {
      "main": [
        [
          {
            "node": "Check Audio Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Audio Generation": {
      "main": [
        [
          {
            "node": "Log Audio Ready",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Audio Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Audio Ready": {
      "main": [
        [
          {
            "node": "Upload with Proven Method",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload with Proven Method": {
      "main": [
        [
          {
            "node": "Check Upload Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Upload Success": {
      "main": [
        [
          {
            "node": "Log Proven Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Proven Method Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {}
}
