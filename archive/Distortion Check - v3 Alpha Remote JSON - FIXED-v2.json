{
  "name": "Distortion Check - v3 Alpha Remote JSON - FIXED",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Get all successful upload items and use their original data\nconst allItems = $input.all();\nconst totalItems = allItems.length;\n\nconsole.log('');\nconsole.log(`üéâ BATCH COMPLETED! Processed ${totalItems} files successfully`);\n\nif (totalItems === 0) {\n  console.error('‚ùå ERROR: No items received at all!');\n  return [];\n}\n\n// Get batch info from first item - this contains the correct nextStartIndex\nconst firstItem = allItems[0];\nif (!firstItem?.json) {\n  console.error('‚ùå ERROR: No valid items found');\n  return [];\n}\n\n// Use the EXACT values calculated by Process Remote Content\nconst nextStartIndex = firstItem.json.nextStartIndex;\nconst totalContentItems = firstItem.json.totalContentItems;\nconst hasMoreBatches = firstItem.json.hasMoreBatches;\nconst currentBatch = firstItem.json.currentBatch;\nconst totalBatches = firstItem.json.totalBatches;\nconst originalConfig = firstItem.json.originalConfig;\n\nconsole.log(`üìä BATCH COMPLETION: Completed batch ${currentBatch}/${totalBatches}`);\nconsole.log(`üìä NextStartIndex: ${nextStartIndex}`);\nconsole.log(`üìä HasMoreBatches: ${hasMoreBatches}`);\n\nif (hasMoreBatches) {\n  console.log(`üîÑ Will continue to next batch from index ${nextStartIndex}`);\n} else {\n  console.log('üéä ALL BATCHES COMPLETED!');\n}\n\n// Pass through exact data from Process Remote Content - no recalculation\nreturn [{ json: {\n  hasMoreBatches: hasMoreBatches,\n  nextStartIndex: nextStartIndex,\n  currentBatch: currentBatch,\n  totalBatches: totalBatches,\n  totalContentItems: totalContentItems,\n  processedSoFar: nextStartIndex,\n  originalConfig: originalConfig\n}}];"
      },
      "id": "batch-completion-check",
      "name": "Batch Completion Check",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 300]
    },
    {
      "parameters": {
        "jsCode": "console.log('üèÅ All batches completed successfully!');\nreturn $input.all();"
      },
      "id": "final-completion",
      "name": "Final Completion",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [800, 100]
    },
    {
      "parameters": {
        "jsCode": "console.log('‚ùå All batches completed - workflow ending');\nreturn $input.all();"
      },
      "id": "debug-false-path",
      "name": "Debug False Path",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 100]
    },
    {
      "parameters": {
        "jsCode": "// Take the input item from Batch Completion Check\nconst inputItem = $input.item.json;\nconst config = inputItem.originalConfig;\nconst nextStartIndex = inputItem.nextStartIndex;\n\nconsole.log(`üîÑ SETUP NEXT BATCH: Starting from index ${nextStartIndex}`);\n\n// Create new configuration for next batch with the correct startIndex\nconst newConfig = {\n  ...config,\n  startIndex: nextStartIndex\n};\n\nconsole.log(`üöÄ Sending to Process Remote Content:`);\nconsole.log(`üì§ startIndex: ${newConfig.startIndex}`);\nconsole.log(`üì§ maxItems: ${newConfig.maxItems}`);\n\nreturn [{\n  json: newConfig\n}];"
      },
      "id": "setup-next-batch",
      "name": "Setup Next Batch",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, -200]
    },
    {
      "parameters": {
        "jsCode": "console.log('‚úÖ More batches available - continuing to next batch');\nconsole.log('üîÑ About to wait 3 seconds before next batch');\nreturn $input.all();"
      },
      "id": "debug-true-path",
      "name": "Debug True Path",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [200, -200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "more-batches",
              "leftValue": "={{ $json.hasMoreBatches }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "more-batches-check",
      "name": "More Batches?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [400, 100]
    },
    {
      "parameters": {
        "jsCode": "console.log('üîÑ Processing more batches available...');\nreturn $input.all();"
      },
      "id": "debug-more-batches",
      "name": "Debug More Batches",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 200]
    },
    {
      "parameters": {
        "jsCode": "// Determine which batch was just processed by analyzing the file names\nconst allItems = $input.all();\nconst totalItems = allItems.length;\n\nconsole.log('');\nconsole.log(`‚úÖ Successfully uploaded ${totalItems} files to Cloudinary`);\n\n// Get the original configuration from the workflow execution\n// Try to get it from the Batch Completion Check input context\nconst originalConfig = $('Set Configuration').item?.json || {\n  contentUrl: 'https://raw.githubusercontent.com/velocitystar/N8N-Workflows/main/docs/distortion-check-v3-alpha-test.json',\n  victorVoiceId: 'T9xTMubBGC4Y9y6oHUza',\n  lennyVoiceId: 'WbI4Toj5UDP91WAiEInp',\n  cloudinaryFolder: 'elevenlabs-audio/v3-alpha-test',\n  cloudName: 'dly199qqv',\n  maxItems: 2\n};\n\nconsole.log(`üîß Using configuration:`);\nconsole.log(`   Content URL: ${originalConfig.contentUrl}`);\nconsole.log(`   Max Items: ${originalConfig.maxItems}`);\n\n// Log each successful upload and extract display names\nconst fileNames = allItems.map((item, index) => {\n  const displayName = item.json.display_name || item.json.public_id?.split('/').pop() || `file_${index}`;\n  console.log(`üì¶ ${index + 1}. ${displayName} (${Math.round((item.json.bytes || 0) / 1024)} KB)`);\n  return displayName;\n});\n\n// Define the expected order for v3-alpha-test content\nconst scriptOrder = [\n  'V3_Victor_Test_01', 'V3_Lenny_Test_02', 'V3_Victor_Test_03', 'V3_Lenny_Test_04',\n  'V3_Victor_Test_05', 'V3_Lenny_Test_06', 'V3_Victor_Test_07', 'V3_Lenny_Test_08'\n];\n\n// Find the position of the first file to determine batch position\nconst firstFileName = fileNames[0];\nlet scriptIndex = scriptOrder.indexOf(firstFileName);\nconst TOTAL_SCRIPT_LINES = 8; // Total items in v3-alpha-test\n\n// Use dynamic batch size from actual processed items\nconst BATCH_SIZE = totalItems; // Dynamic batch size based on what was actually processed\nconst TOTAL_BATCHES = Math.ceil(TOTAL_SCRIPT_LINES / (originalConfig.maxItems || 2));\n\nif (scriptIndex === -1) {\n  console.error(`‚ùå Could not find ${firstFileName} in script order!`);\n  console.log('Available files:', scriptOrder);\n  console.log('Received files:', fileNames);\n  \n  // More sophisticated fallback - try to find ANY matching filename\n  for (let i = 0; i < fileNames.length; i++) {\n    const idx = scriptOrder.indexOf(fileNames[i]);\n    if (idx !== -1) {\n      scriptIndex = idx;\n      console.log(`üîÑ Found fallback match: ${fileNames[i]} at index ${idx}`);\n      break;\n    }\n  }\n  \n  // Final fallback - use sequential processing\n  if (scriptIndex === -1) {\n    scriptIndex = 0;\n    console.log(`üîÑ Using sequential fallback starting at index 0`);\n  }\n}\n\n// Calculate batch progression\nconst nextStartIndex = scriptIndex + totalItems; // Start after the items we just processed\nconst hasMoreBatches = nextStartIndex < TOTAL_SCRIPT_LINES;\nconst completedBatch = Math.floor(scriptIndex / (originalConfig.maxItems || 2)) + 1;\n\nconsole.log(`üìä BATCH ANALYSIS:`);\nconsole.log(`   Files processed: ${totalItems}`);\nconsole.log(`   First file: ${firstFileName}`);\nconsole.log(`   Script index: ${scriptIndex}`);\nconsole.log(`   Completed batch: ${completedBatch}/${TOTAL_BATCHES}`);\nconsole.log(`   Next start index: ${nextStartIndex}`);\nconsole.log(`   Has more batches: ${hasMoreBatches}`);\nconsole.log(`   Remaining items: ${TOTAL_SCRIPT_LINES - nextStartIndex}`);\n\n// Return batch control data with preserved original configuration\nconst result = [{\n  json: {\n    nextStartIndex: nextStartIndex,\n    hasMoreBatches: hasMoreBatches,\n    currentBatch: completedBatch,\n    totalBatches: TOTAL_BATCHES,\n    totalContentItems: TOTAL_SCRIPT_LINES,\n    processedSoFar: nextStartIndex,\n    originalConfig: originalConfig\n  }\n}];\n\nconsole.log('üöÄ Sending batch control data to Batch Completion Check');\nconsole.log('üîß Preserved original contentUrl:', originalConfig.contentUrl);\nreturn result;"
      },
      "id": "log-success",
      "name": "Log Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-200, 300]
    },
    {
      "parameters": {
        "jsCode": "// Check what we received from Cloudinary\nconst allItems = $input.all();\nconsole.log(`üîç UPLOAD CHECK: Received ${allItems.length} items from Cloudinary`);\n\n// Process each item and determine success/failure\nconst results = allItems.map((item, index) => {\n  const data = item.json;\n  console.log(`üì¶ Item ${index + 1}: ${data.fileName || 'Unknown'}`);\n  console.log('  Error:', data.error);\n  console.log('  Public ID:', data.public_id);\n  console.log('  Secure URL:', data.secure_url);\n  \n  // Check if upload was successful\n  const isSuccess = !data.error && data.public_id;\n  console.log(`  Success: ${isSuccess}`);\n  \n  return {\n    json: data,\n    success: isSuccess\n  };\n});\n\n// Separate successful and failed uploads\nconst successful = results.filter(r => r.success);\nconst failed = results.filter(r => !r.success);\n\nconsole.log(`üìä UPLOAD SUMMARY:`);\nconsole.log(`  Successful: ${successful.length}`);\nconsole.log(`  Failed: ${failed.length}`);\n\nif (successful.length > 0) {\n  console.log('‚úÖ Sending successful uploads to Log Success');\n  return successful.map(r => ({ json: r.json }));\n} else {\n  console.log('‚ùå No successful uploads - sending to error handling');\n  return failed.map(r => ({ json: r.json }));\n}"
      },
      "id": "check-upload-success",
      "name": "Check Upload Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-400, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.cloudinary.com/v1_1/{{ $json.cloudName }}/auto/upload",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            },
            {
              "name": "upload_preset",
              "value": "n8n_unsigned"
            },
            {
              "name": "public_id",
              "value": "={{ $json.publicId }}"
            },
            {
              "name": "tags",
              "value": "=elevenlabs,v3-alpha,audio,{{ $json.speaker.toLowerCase() }}"
            }
          ]
        },
        "options": {
          "timeout": 60000
        }
      },
      "id": "upload-to-cloudinary",
      "name": "Upload to Cloudinary",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-600, 300],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 2000,
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Pass through all input items with proper binary data preservation and filename\nreturn $input.all().map(item => {\n  // Safety check for fileName\n  const fileName = item.json.fileName || 'unknown.wav';\n  const fileNameWithoutExt = fileName.replace('.wav', '');\n  \n  // Check if we have valid binary data\n  if (!item.binary || !item.binary.data) {\n    console.error(`‚ùå No binary audio data found for ${fileName}`);\n    console.error('This usually means ElevenLabs API returned an error instead of audio');\n    console.error('Check: API key, voice ID, quota, and request format');\n    \n    return {\n      json: {\n        ...item.json,\n        error: 'No binary audio data - ElevenLabs API may have failed',\n        fileName: fileName,\n        publicId: `${item.json.cloudinaryFolder}/${fileNameWithoutExt}`,\n        uploadReady: false\n      }\n    };\n  }\n  \n  // Validate binary data integrity to prevent contamination\n  const audioSize = item.binary.data.length;\n  const isValidAudio = audioSize > 1000; // Audio files should be larger than 1KB\n  \n  console.log(`‚úÖ Binary audio data found for ${fileName}`);\n  console.log(`üìä Audio size: ${Math.round(audioSize / 1024)} KB`);\n  \n  if (!isValidAudio) {\n    console.warn(`‚ö†Ô∏è Audio file ${fileName} seems too small (${audioSize} bytes) - possible corruption`);\n  }\n  \n  return {\n    json: {\n      ...item.json,\n      publicId: `${item.json.cloudinaryFolder}/${fileNameWithoutExt}`,\n      uploadReady: true,\n      audioSize: audioSize,\n      // Add execution timestamp to track freshness\n      generatedAt: new Date().toISOString()\n    },\n    binary: {\n      data: {\n        ...item.binary.data,\n        fileName: fileName,\n        mimeType: 'audio/mpeg'\n      }\n    }\n  };\n});"
      },
      "id": "prepare-for-upload",
      "name": "Prepare for Upload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-800, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "audio-success",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-audio-generation",
      "name": "Check Audio Generation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [-1000, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.elevenlabs.io/v1/text-to-speech/{{ $json.voiceId }}?output_format={{ $json.responseFormat || 'mp3_44100_128' }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.elevenlabsPayload }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          },
          "timeout": 60000
        }
      },
      "id": "generate-audio",
      "name": "Generate Audio",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-1200, 300],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 5000,
      "credentials": {
        "httpHeaderAuth": {
          "id": "elevenlabs-auth",
          "name": "ElevenLabs API Auth"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const current = $input.item.json;\n\nconsole.log(`üéôÔ∏è Processing ElevenLabs audio for: ${current.fileName}`);\nconsole.log(`üë§ Speaker: ${current.speaker}`);\nconsole.log(`üìù Text: ${current.text.substring(0, 100)}...`);\nconsole.log(`üéØ Voice ID: ${current.voiceId}`);\nconsole.log(`üöÄ Model: ${current.modelId}`);\nconsole.log(`üìä Item ${current.itemIndex}/${current.totalItems} in batch ${current.currentBatch}/${current.totalBatches}`);\n\n// Helper function to snap stability to required values: 0.0, 0.5, 1.0\nconst snapStability = (value) => {\n  if (value <= 0.25) return 0.0;  // Creative\n  if (value <= 0.75) return 0.5;  // Natural  \n  return 1.0;                     // Robust\n};\n\n// Build ElevenLabs API payload with required stability values\nconst payload = {\n  text: current.text,\n  model_id: current.modelId || 'eleven_turbo_v2_5',\n  voice_settings: {\n    stability: snapStability(current.voiceSettings?.stability || 0.5),\n    similarity_boost: Math.min(Math.max(current.voiceSettings?.similarityBoost || 0.7, 0.0), 1.0),\n    style: Math.min(Math.max(current.voiceSettings?.style || 0.0, 0.0), 1.0),\n    use_speaker_boost: current.voiceSettings?.useSpeakerBoost !== undefined ? current.voiceSettings.useSpeakerBoost : true\n  }\n};\n\nconsole.log(`üöÄ ElevenLabs payload prepared:`);\nconsole.log(`   Model: ${payload.model_id}`);\nconsole.log(`   Voice settings: ${JSON.stringify(payload.voice_settings)}`);\nconsole.log(`   Stability snapped to: ${payload.voice_settings.stability} (0.0=Creative, 0.5=Natural, 1.0=Robust)`);\n\nreturn [{\n  json: {\n    ...current,\n    elevenlabsPayload: payload\n  }\n}];"
      },
      "id": "build-elevenlabs-payload",
      "name": "Build ElevenLabs Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1400, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ $json.contentUrl }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 30000
        }
      },
      "id": "fetch-remote-json",
      "name": "Fetch Remote JSON",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-1600, 300]
    },
    {
      "parameters": {
        "jsCode": "const config = $input.item.json;\n\n// Clear any potential state contamination\nconsole.log('üßπ Clearing workflow state for fresh execution');\nconsole.log('üì§ Passing configuration to Fetch Remote JSON:');\nconsole.log(`   Content URL: ${config.contentUrl}`);\nconsole.log(`   Max Items: ${config.maxItems}`);\nconsole.log(`   Start Index: ${config.startIndex}`);\nconsole.log(`   Execution ID: ${new Date().getTime()}`);\n\nreturn $input.all();"
      },
      "id": "pass-config-to-fetch",
      "name": "Pass Config to Fetch",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1800, 300]
    },
    {
      "parameters": {
        "jsCode": "console.log('üåê Processing v3 Alpha remote content');\nconsole.log('üîê Using v3 Alpha model with Audio Tags support');\n\n// Get the remote JSON data and configuration from input context\nconst remoteData = $json;\nconst config = $('Pass Config to Fetch').item.json;\n\nconst maxItems = config.maxItems || 5;\nconst startIndex = config.startIndex || 0;\nconst victorVoiceId = config.victorVoiceId;\nconst lennyVoiceId = config.lennyVoiceId;\nconst cloudinaryFolder = config.cloudinaryFolder;\nconst cloudName = config.cloudName;\n\nconsole.log('üìä Max items per batch:', maxItems);\nconsole.log('üéØ Starting from index:', startIndex);\nconsole.log('‚úÖ Successfully received v3 Alpha remote JSON');\n\n// Extract content array\nlet contentItems;\nif (Array.isArray(remoteData)) {\n  contentItems = remoteData;\n  console.log('üìã Content is direct array');\n} else if (remoteData.content && Array.isArray(remoteData.content)) {\n  contentItems = remoteData.content;\n  console.log('üìã Content found in .content property');\n} else {\n  console.error('‚ùå Invalid remote JSON format - no content array found');\n  throw new Error('Remote JSON must be array or object with content array');\n}\n\nconsole.log(`üìö Total content items available: ${contentItems.length}`);\n\n// Get default settings from remote data\nconst defaultSettings = remoteData.defaultSettings || {};\nconst voiceMapping = remoteData.voiceMapping || {};\n\n// Apply rate limiting - only process maxItems at a time\nconst endIndex = Math.min(startIndex + maxItems, contentItems.length);\nconst selectedLines = contentItems.slice(startIndex, endIndex);\nconst totalBatches = Math.ceil(contentItems.length / maxItems);\nconst currentBatch = Math.floor(startIndex / maxItems) + 1;\n\nconsole.log(`üìä Processing v3 Alpha batch ${currentBatch}/${totalBatches}: lines ${startIndex + 1} to ${endIndex}`);\n\nif (selectedLines.length === 0) {\n  console.warn('‚ö†Ô∏è No lines selected! All processing complete.');\n  return [];\n}\n\nif (endIndex < contentItems.length) {\n  console.log(`üìã Remaining lines after this batch: ${contentItems.length - endIndex}`);\n  console.log(`üîÑ Will automatically continue to next batch`);\n} else {\n  console.log('‚úÖ This is the final batch');\n}\n\n// Create individual items for processing with loop control data (preserving known good pattern)\nreturn selectedLines.map((line, index) => {\n  // Safety check for fileName\n  const fileName = line.fileName || 'unknown.wav';\n  const fileNameWithoutExt = fileName.replace('.wav', '');\n  \n  return {\n    json: {\n      ...line, // Preserve all original fields including Audio Tags\n      voiceId: line.voiceId || voiceMapping[line.speaker] || (line.speaker === 'Victor' ? victorVoiceId : lennyVoiceId),\n      cloudinaryFolder: cloudinaryFolder,\n      cloudName: cloudName,\n      itemIndex: index + 1,\n      totalItems: selectedLines.length,\n      batchStartIndex: startIndex,\n      globalIndex: startIndex + index + 1,\n      totalContentItems: contentItems.length,\n      currentBatch: currentBatch,\n      totalBatches: totalBatches,\n      publicId: `${cloudinaryFolder}/${fileNameWithoutExt}`,\n      // Loop control data\n      nextStartIndex: endIndex,\n      hasMoreBatches: endIndex < contentItems.length,\n      originalConfig: {\n        contentUrl: config.contentUrl,\n        victorVoiceId: victorVoiceId,\n        lennyVoiceId: lennyVoiceId,\n        cloudinaryFolder: cloudinaryFolder,\n        cloudName: cloudName,\n        maxItems: maxItems\n      }\n    }\n  };\n});"
      },
      "id": "process-remote-content-v3-alpha",
      "name": "Process Remote Content (v3 Alpha)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1400, 100]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "content-url",
              "name": "contentUrl",
              "value": "https://raw.githubusercontent.com/velocitystar/N8N-Workflows/main/docs/distortion-check-v3-alpha-test.json",
              "type": "string"
            },
            {
              "id": "victor-voice",
              "name": "victorVoiceId",
              "value": "T9xTMubBGC4Y9y6oHUza",
              "type": "string"
            },
            {
              "id": "lenny-voice",
              "name": "lennyVoiceId",
              "value": "WbI4Toj5UDP91WAiEInp",
              "type": "string"
            },
            {
              "id": "cloudinary-folder",
              "name": "cloudinaryFolder",
              "value": "elevenlabs-audio/v3-alpha-test",
              "type": "string"
            },
            {
              "id": "cloudinary-cloud-name",
              "name": "cloudName",
              "value": "dly199qqv",
              "type": "string"
            },
            {
              "id": "rate-limit",
              "name": "maxItems",
              "value": 2,
              "type": "number"
            },
            {
              "id": "start-index",
              "name": "startIndex",
              "value": 0,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "set-configuration",
      "name": "Set Configuration",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [-2000, 300]
    },
    {
      "parameters": {},
      "id": "start",
      "name": "Start",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [-2200, 300]
    },
    {
      "parameters": {
        "unit": "seconds",
        "amount": 3
      },
      "id": "wait-3-seconds",
      "name": "Wait 3 seconds",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [200, -400]
    }
  ],
  "pinData": {},
  "connections": {
    "Batch Completion Check": {
      "main": [
        [
          {
            "node": "More Batches?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug False Path": {
      "main": [
        [
          {
            "node": "Final Completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setup Next Batch": {
      "main": [
        [
          {
            "node": "Pass Config to Fetch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug True Path": {
      "main": [
        [
          {
            "node": "Wait 3 seconds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "More Batches?": {
      "main": [
        [
          {
            "node": "Debug True Path",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Debug False Path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug More Batches": {
      "main": [
        [
          {
            "node": "Final Completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Success": {
      "main": [
        [
          {
            "node": "Batch Completion Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Upload Success": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to Cloudinary": {
      "main": [
        [
          {
            "node": "Check Upload Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare for Upload": {
      "main": [
        [
          {
            "node": "Upload to Cloudinary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Audio Generation": {
      "main": [
        [
          {
            "node": "Prepare for Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Audio": {
      "main": [
        [
          {
            "node": "Check Audio Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build ElevenLabs Payload": {
      "main": [
        [
          {
            "node": "Generate Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Remote JSON": {
      "main": [
        [
          {
            "node": "Process Remote Content (v3 Alpha)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pass Config to Fetch": {
      "main": [
        [
          {
            "node": "Fetch Remote JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Remote Content (v3 Alpha)": {
      "main": [
        [
          {
            "node": "Build ElevenLabs Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Configuration": {
      "main": [
        [
          {
            "node": "Pass Config to Fetch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "Set Configuration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 3 seconds": {
      "main": [
        [
          {
            "node": "Setup Next Batch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "",
    "timezone": "America/New_York"
  },
  "versionId": "1",
  "meta": {
    "instanceId": "fixed-v3-alpha-workflow"
  },
  "id": "distortion-check-v3-alpha-fixed",
  "tags": []
}
