{
  "name": "Distortion Check - v3 Alpha Remote JSON",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// DEBUG: Get all successful upload items and use their original data\nconst allItems = $input.all();\nconst totalItems = allItems.length;\n\nconsole.log('');\nconsole.log(`üéâ BATCH COMPLETED! Processed ${totalItems} files successfully`);\nconsole.log(`üîç DEBUG: Total items received: ${totalItems}`);\n\nif (totalItems === 0) {\n  console.error('‚ùå ERROR: No items received at all!');\n  console.error('This means Log Success node is not passing data correctly');\n  return [];\n}\n\n// DEBUG: Check what data structure we received\nconst firstItem = allItems[0];\nconsole.log('üîç DEBUG: First item keys:', Object.keys(firstItem.json || {}));\nconsole.log('üîç DEBUG: First item data:', JSON.stringify(firstItem.json, null, 2));\n\nif (!firstItem?.json) {\n  console.error('‚ùå ERROR: First item has no json property');\n  return [];\n}\n\n// Try to get batch info from original data first, then fallback\nlet nextStartIndex = firstItem.json.originalNextStartIndex || firstItem.json.nextStartIndex;\nlet totalScriptLines = firstItem.json.originalTotalScriptLines || firstItem.json.totalScriptLines || 8;\nlet hasMoreBatches = firstItem.json.originalHasMoreBatches !== undefined ? firstItem.json.originalHasMoreBatches : firstItem.json.hasMoreBatches;\nlet currentBatch = firstItem.json.originalCurrentBatch || firstItem.json.currentBatch;\nlet totalBatches = firstItem.json.originalTotalBatches || firstItem.json.totalBatches;\nlet originalConfig = firstItem.json.originalConfig;\n\nconsole.log(`üìä DEBUG VALUES:`);\nconsole.log(`   nextStartIndex: ${nextStartIndex}`);\nconsole.log(`   totalScriptLines: ${totalScriptLines}`);\nconsole.log(`   hasMoreBatches: ${hasMoreBatches}`);\nconsole.log(`   currentBatch: ${currentBatch}`);\nconsole.log(`   totalBatches: ${totalBatches}`);\nconsole.log(`   originalConfig:`, originalConfig);\n\nif (!nextStartIndex && nextStartIndex !== 0) {\n  console.error('‚ùå ERROR: nextStartIndex is undefined - data structure problem!');\n  return [];\n}\n\nconsole.log(`üìä USING ACTUAL DATA: Completed batch ${currentBatch}/${totalBatches}`);\nconsole.log(`üìä NextStartIndex: ${nextStartIndex}`);\nconsole.log(`üìä HasMoreBatches: ${hasMoreBatches}`);\n\nif (hasMoreBatches) {\n  console.log(`üîÑ Will continue to next batch from index ${nextStartIndex}`);\n} else {\n  console.log('üéä ALL BATCHES COMPLETED!');\n}\n\n// Pass through data - use fallbacks if needed\nconst result = [{ json: {\n  hasMoreBatches: hasMoreBatches,\n  nextStartIndex: nextStartIndex,\n  currentBatch: currentBatch,\n  totalBatches: totalBatches,\n  totalScriptLines: totalScriptLines,\n  processedSoFar: nextStartIndex,\n  originalConfig: originalConfig || {\n    contentUrl: 'https://raw.githubusercontent.com/velocitystar/N8N-Workflows/main/docs/distortion-check-v3-alpha-test.json',\n    victorVoiceId: 'T9xTMubBGC4Y9y6oHUza',\n    lennyVoiceId: 'WbI4Toj5UDP91WAiEInp',\n    cloudinaryFolder: 'elevenlabs-audio/v3-alpha-test',\n    cloudName: 'dly199qqv',\n    maxItems: 5\n  }\n}}];\n\nconsole.log('üöÄ RETURNING TO MORE BATCHES:', JSON.stringify(result[0].json, null, 2));\nreturn result;"
      },
      "id": "74e3e87d-a513-4ec3-b4ed-de0ee68efaab",
      "name": "Batch Completion Check",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 500]
    },
    {
      "parameters": {
        "jsCode": "console.log('üèÅ All batches completed successfully!');\nreturn $input.all();"
      },
      "id": "05dc5285-70a9-41b0-8d97-20512ab0c25c",
      "name": "Final Completion",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1200, 300]
    },
    {
      "parameters": {
        "jsCode": "console.log('‚ùå IF NODE: Taking FALSE path - hasMoreBatches = false');\nconsole.log('üîç Data received at FALSE path:', JSON.stringify($input.all(), null, 2));\nreturn $input.all();"
      },
      "id": "e3df4fc0-693d-49b5-bc82-7bbb23aa9f6f",
      "name": "Debug False Path",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "jsCode": "// Take the input item (should be just one from Batch Completion Check)\nconst inputItem = $input.item.json;\nconst config = inputItem.originalConfig;\nconst nextStartIndex = inputItem.nextStartIndex;\n\nconsole.log(`üîÑ SETUP NEXT BATCH DEBUG:`);\nconsole.log(`üì• Received nextStartIndex: ${nextStartIndex}`);\nconsole.log(`üì• Received hasMoreBatches: ${inputItem.hasMoreBatches}`);\nconsole.log(`üì• Received processedSoFar: ${inputItem.processedSoFar}`);\nconsole.log(`üîç Full input item:`, JSON.stringify(inputItem, null, 2));\n\nconst newConfig = {\n  ...config,\n  startIndex: nextStartIndex\n};\n\nconsole.log(`üöÄ Sending to Pass Config to Fetch:`);\nconsole.log(`üì§ startIndex: ${newConfig.startIndex}`);\nconsole.log(`üì§ maxItems: ${newConfig.maxItems}`);\nconsole.log(`üì§ Full config:`, JSON.stringify(newConfig, null, 2));\n\nreturn [{\n  json: newConfig\n}];"
      },
      "id": "514d6b57-b035-4035-9368-afe25a4a5aa1",
      "name": "Setup Next Batch",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1000, 100]
    },
    {
      "parameters": {
        "jsCode": "console.log('‚úÖ IF NODE: Taking TRUE path - hasMoreBatches = true');\nconsole.log('üîÑ About to wait 3 seconds before next batch');\nreturn $input.all();"
      },
      "id": "10512a44-0752-495b-b973-656fbaf1586d",
      "name": "Debug True Path",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 100]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "has-more-check",
              "leftValue": "={{ String($json.hasMoreBatches) }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "looseTypeValidation": true
        }
      },
      "id": "f94451ca-c5c1-4949-a66c-360b886c3504",
      "name": "More Batches?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [800, 300]
    },
    {
      "parameters": {
        "jsCode": "const item = $input.item.json;\nconsole.log('üîç MORE BATCHES DEBUG:');\nconsole.log('hasMoreBatches:', item.hasMoreBatches, 'type:', typeof item.hasMoreBatches);\nconsole.log('nextStartIndex:', item.nextStartIndex);\nconsole.log('totalScriptLines:', item.totalScriptLines);\nconsole.log('Full item data:', JSON.stringify(item, null, 2));\nreturn $input.all();"
      },
      "id": "9f847f45-325f-48cc-8bc3-c0c2b1ddb453",
      "name": "Debug More Batches",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [600, 300]
    },
    {
      "parameters": {
        "jsCode": "const current = $input.item.json;\n\nconsole.log(`‚úÖ Successfully uploaded: ${current.fileName} (${current.itemIndex}/${current.totalItems})`);\nconsole.log(`üìÅ Cloudinary URL: ${current.secure_url}`);\nconsole.log(`üéØ Public ID: ${current.public_id}`);\n\n// Pass through all the original data for batch control\nreturn [{ \n  json: {\n    fileName: current.fileName,\n    speaker: current.speaker,\n    text: current.text,\n    cloudinaryUrl: current.secure_url,\n    publicId: current.public_id,\n    itemIndex: current.itemIndex,\n    totalItems: current.totalItems,\n    stage: 'completed',\n    // Preserve batch control data\n    nextStartIndex: current.nextStartIndex,\n    hasMoreBatches: current.hasMoreBatches,\n    currentBatch: current.currentBatch,\n    totalBatches: current.totalBatches,\n    totalScriptLines: current.totalScriptLines,\n    originalConfig: current.originalConfig,\n    // Add original processing data for debugging\n    originalNextStartIndex: current.nextStartIndex,\n    originalHasMoreBatches: current.hasMoreBatches,\n    originalCurrentBatch: current.currentBatch,\n    originalTotalBatches: current.totalBatches,\n    originalTotalScriptLines: current.totalScriptLines\n  }\n}];"
      },
      "id": "b5b9d5f2-0c47-4b89-b8e3-4a7e6c9d8f3e",
      "name": "Log Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [200, 500]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "upload-success",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "Check Upload Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [0, 500]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.cloudinary.com/v1_1/{{ $json.cloudName }}/auto/upload",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            },
            {
              "name": "upload_preset",
              "value": "n8n_unsigned"
            },
            {
              "name": "public_id",
              "value": "={{ $json.publicId }}"
            },
            {
              "name": "tags",
              "value": "elevenlabs,v3-alpha-test,audio,{{ $json.speaker.toLowerCase() }}"
            }
          ]
        },
        "options": {
          "timeout": 60000
        }
      },
      "id": "f1e2d3c4-b5a6-9780-cdef-123456789abc",
      "name": "Upload to Cloudinary",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-200, 500],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 2000,
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Pass through all input items with proper binary data preservation and filename\nreturn $input.all().map(item => ({\n  json: {\n    ...item.json,\n    publicId: `${item.json.cloudinaryFolder}/${item.json.fileName.replace('.wav', '')}`,\n    uploadReady: true\n  },\n  binary: {\n    data: {\n      ...item.binary.data,\n      fileName: item.json.fileName,\n      mimeType: 'audio/mpeg'\n    }\n  }\n}));"
      },
      "id": "g2h3i4j5-k6l7-8901-mnop-qrstuvwxyz12",
      "name": "Prepare for Upload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-400, 500]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "audio-success",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "empty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "h3i4j5k6-l7m8-9012-nopq-rstuvwxyz123",
      "name": "Check Audio Generation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [-600, 500]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.elevenlabs.io/v1/text-to-speech/{{ $json.voiceId }}?output_format={{ $json.responseFormat || 'mp3_44100_128' }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.elevenlabsPayload }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "binaryBuffer"
            }
          },
          "timeout": 60000
        }
      },
      "id": "i4j5k6l7-m8n9-0123-opqr-stuvwxyz1234",
      "name": "Generate Audio",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-800, 500],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 5000,
      "credentials": {
        "httpHeaderAuth": {
          "id": "elevenlabs-auth",
          "name": "ElevenLabs API Auth"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const current = $input.item.json;\n\nconsole.log(`üéôÔ∏è Processing ElevenLabs audio for: ${current.fileName}`);\nconsole.log(`üë§ Speaker: ${current.speaker}`);\nconsole.log(`üìù Text: ${current.text.substring(0, 100)}...`);\nconsole.log(`üéØ Voice ID: ${current.voiceId}`);\nconsole.log(`üöÄ Model: ${current.modelId}`);\nconsole.log(`üìä Item ${current.itemIndex}/${current.totalItems} in batch ${current.currentBatch}/${current.totalBatches}`);\n\n// Helper function to snap stability to required values: 0.0, 0.5, 1.0\nconst snapStability = (value) => {\n  if (value <= 0.25) return 0.0;  // Creative\n  if (value <= 0.75) return 0.5;  // Natural  \n  return 1.0;                     // Robust\n};\n\n// Build ElevenLabs API payload with required stability values\nconst payload = {\n  text: current.text,\n  model_id: current.modelId || 'eleven_turbo_v2_5',\n  voice_settings: {\n    stability: snapStability(current.voiceSettings?.stability || 0.5),\n    similarity_boost: Math.min(Math.max(current.voiceSettings?.similarityBoost || 0.7, 0.0), 1.0),\n    style: Math.min(Math.max(current.voiceSettings?.style || 0.0, 0.0), 1.0),\n    use_speaker_boost: current.voiceSettings?.useSpeakerBoost !== undefined ? current.voiceSettings.useSpeakerBoost : true\n  }\n};\n\nconsole.log(`üöÄ ElevenLabs payload prepared:`);\nconsole.log(`   Model: ${payload.model_id}`);\nconsole.log(`   Voice settings: ${JSON.stringify(payload.voice_settings)}`);\nconsole.log(`   Stability snapped to: ${payload.voice_settings.stability} (0.0=Creative, 0.5=Natural, 1.0=Robust)`);\n\nreturn [{\n  json: {\n    ...current,\n    elevenlabsPayload: payload\n  }\n}];"
      },
      "id": "j5k6l7m8-n9o0-1234-pqrs-tuvwxyz12345",
      "name": "Build ElevenLabs Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1000, 500]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "={{ $json.contentUrl }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 10000
        }
      },
      "id": "fetch-remote-json",
      "name": "Fetch Remote JSON",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-1400, 500]
    },
    {
      "parameters": {
        "jsCode": "// Pass configuration data to HTTP Request\nconst config = $input.item.json;\nconsole.log('üöÄ Sending config for remote fetch:', config.contentUrl);\nreturn [{ json: config }];"
      },
      "id": "pass-config-to-fetch",
      "name": "Pass Config to Fetch",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1200, 500]
    },
    {
      "parameters": {
        "jsCode": "console.log('üåê Processing v3 Alpha remote content');\nconsole.log('üîê Using v3 Alpha model with Audio Tags support');\n\n// Get the remote JSON data and configuration from input context\nconst remoteData = $json;\nconst config = $('Pass Config to Fetch').item.json;\n\nconst maxItems = config.maxItems || 5;\nconst startIndex = config.startIndex || 0;\nconst victorVoiceId = config.victorVoiceId;\nconst lennyVoiceId = config.lennyVoiceId;\nconst cloudinaryFolder = config.cloudinaryFolder;\nconst cloudName = config.cloudName;\n\nconsole.log('üìä Max items per batch:', maxItems);\nconsole.log('üéØ Starting from index:', startIndex);\nconsole.log('‚úÖ Successfully received v3 Alpha remote JSON');\n\n// Extract content array\nlet contentItems;\nif (Array.isArray(remoteData)) {\n  contentItems = remoteData;\n  console.log('üìã Content is direct array');\n} else if (remoteData.content && Array.isArray(remoteData.content)) {\n  contentItems = remoteData.content;\n  console.log('üìã Content found in .content property');\n} else {\n  console.error('‚ùå Invalid remote JSON format - no content array found');\n  throw new Error('Remote JSON must be array or object with content array');\n}\n\nconsole.log(`üìö Total content items available: ${contentItems.length}`);\n\n// Get default settings from remote data\nconst defaultSettings = remoteData.defaultSettings || {};\nconst voiceMapping = remoteData.voiceMapping || {};\n\n// Apply rate limiting - only process maxItems at a time\nconst endIndex = Math.min(startIndex + maxItems, contentItems.length);\nconst selectedLines = contentItems.slice(startIndex, endIndex);\nconst totalBatches = Math.ceil(contentItems.length / maxItems);\nconst currentBatch = Math.floor(startIndex / maxItems) + 1;\n\nconsole.log(`üìä Processing v3 Alpha batch ${currentBatch}/${totalBatches}: lines ${startIndex + 1} to ${endIndex}`);\n\nif (selectedLines.length === 0) {\n  console.warn('‚ö†Ô∏è No lines selected! All processing complete.');\n  return [];\n}\n\nif (endIndex < contentItems.length) {\n  console.log(`üìã Remaining lines after this batch: ${contentItems.length - endIndex}`);\n  console.log(`üîÑ Will automatically continue to next batch`);\n} else {\n  console.log('‚úÖ This is the final batch');\n}\n\n// Create individual items for processing with loop control data (preserving known good pattern)\nreturn selectedLines.map((line, index) => ({\n  json: {\n    ...line, // Preserve all original fields including Audio Tags\n    voiceId: line.voiceId || voiceMapping[line.speaker] || (line.speaker === 'Victor' ? victorVoiceId : lennyVoiceId),\n    cloudinaryFolder: cloudinaryFolder,\n    cloudName: cloudName,\n    itemIndex: index + 1,\n    totalItems: selectedLines.length,\n    batchStartIndex: startIndex,\n    globalIndex: startIndex + index + 1,\n    totalScriptLines: contentItems.length,\n    currentBatch: currentBatch,\n    totalBatches: totalBatches,\n    publicId: `${cloudinaryFolder}/${line.fileName.replace('.wav', '')}`,\n    // Loop control data\n    nextStartIndex: endIndex,\n    hasMoreBatches: endIndex < contentItems.length,\n    originalConfig: {\n      contentUrl: config.contentUrl,\n      victorVoiceId: victorVoiceId,\n      lennyVoiceId: lennyVoiceId,\n      cloudinaryFolder: cloudinaryFolder,\n      cloudName: cloudName,\n      maxItems: maxItems\n    }\n  }\n}));"
      },
      "id": "11cf2d53-8eaf-4002-b96b-37ed6486287c",
      "name": "Process Remote Content (v3 Alpha)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1000, 700]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "content-url",
              "name": "contentUrl",
              "value": "https://raw.githubusercontent.com/velocitystar/N8N-Workflows/main/docs/distortion-check-v3-alpha-test.json",
              "type": "string"
            },
            {
              "id": "victor-voice",
              "name": "victorVoiceId",
              "value": "T9xTMubBGC4Y9y6oHUza",
              "type": "string"
            },
            {
              "id": "lenny-voice",
              "name": "lennyVoiceId",
              "value": "WbI4Toj5UDP91WAiEInp",
              "type": "string"
            },
            {
              "id": "cloudinary-folder",
              "name": "cloudinaryFolder",
              "value": "elevenlabs-audio/v3-alpha-test",
              "type": "string"
            },
            {
              "id": "cloudinary-cloud-name",
              "name": "cloudName",
              "value": "dly199qqv",
              "type": "string"
            },
            {
              "id": "rate-limit",
              "name": "maxItems",
              "value": 5,
              "type": "number"
            },
            {
              "id": "start-index",
              "name": "startIndex",
              "value": 0,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "8afea632-9e31-4d6e-98ea-2adf55c8bf1d",
      "name": "Set Configuration",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [-1600, 500]
    },
    {
      "parameters": {},
      "id": "b8280a5f-58db-4af7-ba0c-2b2a4bde71a2",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [-1800, 500]
    },
    {
      "parameters": {
        "unit": "seconds",
        "amount": 3
      },
      "id": "wait-node-id",
      "name": "Wait 3 seconds",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [800, 100]
    }
  ],
  "pinData": {},
  "connections": {
    "Batch Completion Check": {
      "main": [
        [
          {
            "node": "Debug More Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug False Path": {
      "main": [
        [
          {
            "node": "Final Completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setup Next Batch": {
      "main": [
        [
          {
            "node": "Pass Config to Fetch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug True Path": {
      "main": [
        [
          {
            "node": "Wait 3 seconds",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "More Batches?": {
      "main": [
        [
          {
            "node": "Debug True Path",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Debug False Path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug More Batches": {
      "main": [
        [
          {
            "node": "More Batches?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Success": {
      "main": [
        [
          {
            "node": "Batch Completion Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Upload Success": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Upload to Cloudinary": {
      "main": [
        [
          {
            "node": "Check Upload Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare for Upload": {
      "main": [
        [
          {
            "node": "Upload to Cloudinary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Audio Generation": {
      "main": [
        [
          {
            "node": "Prepare for Upload",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Generate Audio": {
      "main": [
        [
          {
            "node": "Check Audio Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build ElevenLabs Payload": {
      "main": [
        [
          {
            "node": "Generate Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Remote JSON": {
      "main": [
        [
          {
            "node": "Process Remote Content (v3 Alpha)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pass Config to Fetch": {
      "main": [
        [
          {
            "node": "Fetch Remote JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Remote Content (v3 Alpha)": {
      "main": [
        [
          {
            "node": "Build ElevenLabs Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Configuration": {
      "main": [
        [
          {
            "node": "Pass Config to Fetch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "Set Configuration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 3 seconds": {
      "main": [
        [
          {
            "node": "Setup Next Batch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "",
    "timezone": "America/New_York"
  },
  "versionId": "1.0.0",
  "meta": {
    "instanceId": "v3-alpha-remote-json-tts"
  },
  "id": "v3-alpha-remote-json-complete",
  "tags": []
}
