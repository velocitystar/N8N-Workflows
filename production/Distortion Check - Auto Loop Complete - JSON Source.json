{
  "name": "Distortion Check - Auto Loop Complete - JSON Source",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// DEBUG: Get all successful upload items and use their original data\nconst allItems = $input.all();\nconst totalItems = allItems.length;\n\nconsole.log('');\nconsole.log(`üéâ BATCH COMPLETED! Processed ${totalItems} files successfully`);\nconsole.log(`üîç DEBUG: Total items received: ${totalItems}`);\n\nif (totalItems === 0) {\n  console.error('‚ùå ERROR: No items received at all!');\n  console.error('This means Log Success node is not passing data correctly');\n  return [];\n}\n\n// DEBUG: Check what data structure we received\nconst firstItem = allItems[0];\nconsole.log('üîç DEBUG: First item keys:', Object.keys(firstItem.json || {}));\nconsole.log('üîç DEBUG: First item data:', JSON.stringify(firstItem.json, null, 2));\n\nif (!firstItem?.json) {\n  console.error('‚ùå ERROR: First item has no json property');\n  return [];\n}\n\n// Try to get batch info from original data first, then fallback\nlet nextStartIndex = firstItem.json.originalNextStartIndex || firstItem.json.nextStartIndex;\nlet totalScriptLines = firstItem.json.originalTotalScriptLines || firstItem.json.totalScriptLines || 29;\nlet hasMoreBatches = firstItem.json.originalHasMoreBatches !== undefined ? firstItem.json.originalHasMoreBatches : firstItem.json.hasMoreBatches;\nlet currentBatch = firstItem.json.originalCurrentBatch || firstItem.json.currentBatch;\nlet totalBatches = firstItem.json.originalTotalBatches || firstItem.json.totalBatches;\nlet originalConfig = firstItem.json.originalConfig;\n\nconsole.log(`üìä DEBUG VALUES:`);\nconsole.log(`   nextStartIndex: ${nextStartIndex}`);\nconsole.log(`   totalScriptLines: ${totalScriptLines}`);\nconsole.log(`   hasMoreBatches: ${hasMoreBatches}`);\nconsole.log(`   currentBatch: ${currentBatch}`);\nconsole.log(`   totalBatches: ${totalBatches}`);\nconsole.log(`   originalConfig:`, originalConfig);\n\nif (!nextStartIndex && nextStartIndex !== 0) {\n  console.error('‚ùå ERROR: nextStartIndex is undefined - data structure problem!');\n  return [];\n}\n\nconsole.log(`üìä USING ACTUAL DATA: Completed batch ${currentBatch}/${totalBatches}`);\nconsole.log(`üìä NextStartIndex: ${nextStartIndex}`);\nconsole.log(`üìä HasMoreBatches: ${hasMoreBatches}`);\n\nif (hasMoreBatches) {\n  console.log(`üîÑ Will continue to next batch from index ${nextStartIndex}`);\n} else {\n  console.log('üéä ALL BATCHES COMPLETED!');\n}\n\n// Pass through data - use fallbacks if needed\nconst result = [{ json: {\n  hasMoreBatches: hasMoreBatches,\n  nextStartIndex: nextStartIndex,\n  currentBatch: currentBatch,\n  totalBatches: totalBatches,\n  totalScriptLines: totalScriptLines,\n  processedSoFar: nextStartIndex,\n  originalConfig: originalConfig || {\n    victorVoiceId: 'T9xTMubBGC4Y9y6oHUza',\n    lennyVoiceId: 'WbI4Toj5UDP91WAiEInp',\n    cloudinaryFolder: 'elevenlabs-audio/episode-01',\n    cloudName: 'dly199qqv',\n    maxItems: 5\n  }\n}}];\n\nconsole.log('üöÄ RETURNING TO MORE BATCHES:', JSON.stringify(result[0].json, null, 2));\nreturn result;"
      },
      "id": "74e3e87d-a513-4ec3-b4ed-de0ee68efaab",
      "name": "Batch Completion Check",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-240, 288]
    },
    {
      "parameters": {
        "jsCode": "console.log('üèÅ All batches completed successfully!');\nreturn $input.all();"
      },
      "id": "05dc5285-70a9-41b0-8d97-20512ab0c25c",
      "name": "Final Completion",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [336, 32]
    },
    {
      "parameters": {
        "jsCode": "console.log('‚ùå IF NODE: Taking FALSE path - hasMoreBatches = false (THIS IS THE PROBLEM!)');\nconsole.log('üîç Data received at FALSE path:', JSON.stringify($input.all(), null, 2));\nreturn $input.all();"
      },
      "id": "e3df4fc0-693d-49b5-bc82-7bbb23aa9f6f",
      "name": "Debug False Path",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [144, 32]
    },
    {
      "parameters": {
        "jsCode": "// Take the input item (should be just one from Batch Completion Check)\nconst inputItem = $input.item.json;\nconst config = inputItem.originalConfig;\nconst nextStartIndex = inputItem.nextStartIndex;\n\nconsole.log(`üîÑ SETUP NEXT BATCH DEBUG:`);\nconsole.log(`üì• Received nextStartIndex: ${nextStartIndex}`);\nconsole.log(`üì• Received hasMoreBatches: ${inputItem.hasMoreBatches}`);\nconsole.log(`üì• Received processedSoFar: ${inputItem.processedSoFar}`);\nconsole.log(`üîç Full input item:`, JSON.stringify(inputItem, null, 2));\n\nconst newConfig = {\n  ...config,\n  startIndex: nextStartIndex\n};\n\nconsole.log(`üöÄ Sending to Load Script Lines:`);\nconsole.log(`üì§ startIndex: ${newConfig.startIndex}`);\nconsole.log(`üì§ maxItems: ${newConfig.maxItems}`);\nconsole.log(`üì§ Full config:`, JSON.stringify(newConfig, null, 2));\n\nreturn [{\n  json: newConfig\n}];"
      },
      "id": "514d6b57-b035-4035-9368-afe25a4a5aa1",
      "name": "Setup Next Batch",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [256, -256]
    },
    {
      "parameters": {
        "jsCode": "console.log('‚úÖ IF NODE: Taking TRUE path - hasMoreBatches = true');\nconsole.log('üîÑ About to wait 3 seconds before next batch');\nreturn $input.all();"
      },
      "id": "10512a44-0752-495b-b973-656fbaf1586d",
      "name": "Debug True Path",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-272, -304]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose"
          },
          "conditions": [
            {
              "id": "has-more-check",
              "leftValue": "={{ String($json.hasMoreBatches) }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {
          "looseTypeValidation": true
        }
      },
      "id": "f94451ca-c5c1-4949-a66c-360b886c3504",
      "name": "More Batches?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [-48, 16]
    },
    {
      "parameters": {
        "jsCode": "const item = $input.item.json;\nconsole.log('üîç MORE BATCHES DEBUG:');\nconsole.log('hasMoreBatches:', item.hasMoreBatches, 'type:', typeof item.hasMoreBatches);\nconsole.log('nextStartIndex:', item.nextStartIndex);\nconsole.log('totalScriptLines:', item.totalScriptLines);\nconsole.log('Full item data:', JSON.stringify(item, null, 2));\nreturn $input.all();"
      },
      "id": "9f847f45-325f-48cc-8bc3-c0c2b1ddb453",
      "name": "Debug More Batches",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-80, -208]
    },
    {
      "parameters": {
        "jsCode": "const current = $input.item.json;\nconst error = current.error || {};\nconst statusCode = error.httpCode || 'unknown';\nconst message = error.message || 'Cloudinary upload failed';\n\nconsole.error(`‚ùå Failed to upload to Cloudinary: ${current.fileName} (${current.itemIndex}/${current.totalItems})`);\nconsole.error('Status Code:', statusCode);\nconsole.error('Error Message:', message);\n\n// Common Cloudinary error explanations\nif (statusCode === 401) {\n  console.error('üîë Authentication failed:');\n  console.error('   - Check your Cloudinary API credential is properly configured');\n  console.error('   - Verify the Authorization header format: Basic base64(api_key:api_secret)');\n  console.error('   - Make sure API key and secret are correct from Cloudinary dashboard');\n} else if (statusCode === 400) {\n  console.error('üìù Bad request:');\n  console.error('   - Check the file format is supported');\n  console.error('   - Verify the public_id format is valid');\n  console.error('   - Make sure cloud name is correct in the URL');\n} else if (statusCode === 420) {\n  console.error('üìä Rate limit or quota exceeded');\n} else if (statusCode === 500) {\n  console.error('üîß Cloudinary server error - try again later');\n}\n\nconsole.error('üí° Troubleshooting tips:');\nconsole.error('   1. Check your Cloudinary API credential (HTTP Header Auth)');\nconsole.error('   2. Verify cloud name is correct in Set Configuration node');\nconsole.error('   3. Ensure API key and secret are base64 encoded correctly');\nconsole.error('   4. Check Cloudinary dashboard for account status');\n\n// Continue processing other items\nreturn [{ \n  json: { \n    fileName: current.fileName,\n    speaker: current.speaker,\n    error: message,\n    statusCode: statusCode,\n    itemIndex: current.itemIndex,\n    totalItems: current.totalItems,\n    stage: 'cloudinary_upload'\n  }\n}];"
      },
      "id": "b70f333d-d036-4f04-82e3-155bbaf0b69e",
      "name": "Log Upload Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-480, 288]
    },
    {
      "parameters": {
        "jsCode": "const current = $input.item.json;\nconst error = current.error || {};\nconst statusCode = error.httpCode || 'unknown';\nconst message = error.message || 'Unknown error occurred';\n\nconsole.error(`‚ùå Failed to generate audio: ${current.fileName} (${current.itemIndex}/${current.totalItems})`);\nconsole.error('Status Code:', statusCode);\nconsole.error('Error Message:', message);\n\n// Common error explanations\nif (statusCode === 401) {\n  console.error('üîë Credential issue - check your ElevenLabs API credential in N8N');\n} else if (statusCode === 429) {\n  console.error('‚è±Ô∏è Rate limit exceeded - consider increasing wait time between requests');\n} else if (statusCode === 422) {\n  console.error('üé§ Voice ID may be invalid or text content has issues');\n} else if (statusCode === 403) {\n  console.error('üö´ Forbidden - check your ElevenLabs account status');\n}\n\n// Continue processing other items\nreturn [{\n  json: {\n    fileName: current.fileName,\n    speaker: current.speaker,\n    error: message,\n    statusCode: statusCode,\n    itemIndex: current.itemIndex,\n    totalItems: current.totalItems,\n    stage: 'audio_generation'\n  }\n}];"
      },
      "id": "c46ba6d8-e2ec-4a01-91de-f2c76e77aaed",
      "name": "Log Audio Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-864, 176]
    },
    {
      "parameters": {
        "jsCode": "// Determine which batch was just processed by analyzing the file names\nconst allItems = $input.all();\nconst totalItems = allItems.length;\n\nconsole.log('');\nconsole.log(`‚úÖ Successfully uploaded ${totalItems} files to Cloudinary`);\n\n// Log each successful upload and analyze file names\nconst fileNames = allItems.map((item, index) => {\n  const displayName = item.json.display_name;\n  console.log(`üì¶ ${index + 1}. ${displayName} (${Math.round((item.json.bytes || 0) / 1024)} KB)`);\n  return displayName;\n});\n\n// Determine batch from file names - use a mapping of known script progression\nconst scriptOrder = [\n  'EP01_Victor_ColdOpen_01', 'EP01_Lenny_ColdOpen_02', 'EP01_Victor_ColdOpen_03', 'EP01_Victor_Intro_01', 'EP01_Lenny_Intro_02',  // Batch 1 (0-4)\n  'EP01_Victor_Intro_03', 'EP01_Lenny_Intro_04', 'EP01_Victor_Intro_05', 'EP01_Lenny_Intro_06', 'EP01_Victor_Intro_07',      // Batch 2 (5-9) \n  'EP01_Lenny_Intro_08', 'EP01_Victor_Intro_09', 'EP01_Lenny_Intro_10', 'EP01_Victor_ActOne_01', 'EP01_Lenny_ActOne_02',     // Batch 3 (10-14)\n  'EP01_Victor_ActOne_03', 'EP01_Lenny_ActOne_04', 'EP01_Victor_ActOne_05', 'EP01_Lenny_ActOne_06', 'EP01_Victor_ActOne_07',  // Batch 4 (15-19)\n  'EP01_Lenny_ActOne_08', 'EP01_Victor_ActOne_09', 'EP01_Lenny_ActOne_10', 'EP01_Victor_ActOne_11', 'EP01_Lenny_ActOne_12',   // Batch 5 (20-24)\n  'EP01_Victor_ActOne_13', 'EP01_Lenny_ActOne_14', 'EP01_Victor_ActOne_15', 'EP01_Lenny_ActOne_16'                            // Batch 6 (25-28)\n];\n\n// Find the position of the first file to determine batch\nconst firstFileName = fileNames[0];\nconst scriptIndex = scriptOrder.indexOf(firstFileName);\nconst BATCH_SIZE = 5;\nconst TOTAL_SCRIPT_LINES = 29;\nconst TOTAL_BATCHES = Math.ceil(TOTAL_SCRIPT_LINES / BATCH_SIZE);\n\nif (scriptIndex === -1) {\n  console.error(`‚ùå Could not find ${firstFileName} in script order!`);\n  return [];\n}\n\n// Calculate which batch just completed\nconst completedBatch = Math.floor(scriptIndex / BATCH_SIZE) + 1;\nconst nextStartIndex = scriptIndex + totalItems; // Start after the items we just processed\nconst hasMoreBatches = nextStartIndex < TOTAL_SCRIPT_LINES;\n\nconsole.log(`üìä BATCH ANALYSIS:`);\nconsole.log(`   First file: ${firstFileName}`);\nconsole.log(`   Script index: ${scriptIndex}`);\nconsole.log(`   Completed batch: ${completedBatch}/${TOTAL_BATCHES}`);\nconsole.log(`   Next start index: ${nextStartIndex}`);\nconsole.log(`   Has more batches: ${hasMoreBatches}`);\nconsole.log(`   Remaining items: ${TOTAL_SCRIPT_LINES - nextStartIndex}`);\n\n// Return batch control data\nconst result = [{\n  json: {\n    nextStartIndex: nextStartIndex,\n    hasMoreBatches: hasMoreBatches,\n    currentBatch: completedBatch,\n    totalBatches: TOTAL_BATCHES,\n    totalScriptLines: TOTAL_SCRIPT_LINES,\n    processedSoFar: nextStartIndex,\n    originalConfig: {\n      victorVoiceId: 'T9xTMubBGC4Y9y6oHUza',\n      lennyVoiceId: 'WbI4Toj5UDP91WAiEInp',\n      cloudinaryFolder: 'elevenlabs-audio/episode-01',\n      cloudName: 'dly199qqv',\n      maxItems: BATCH_SIZE\n    }\n  }\n}];\n\nconsole.log('üöÄ Sending batch control data to Batch Completion Check');\nreturn result;"
      },
      "id": "3e68d258-feac-4c7d-8fde-bc2d40500c51",
      "name": "Log Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-272, -64]
    },
    {
      "parameters": {
        "jsCode": "// DEBUG: Check what we received from Cloudinary\nconst allItems = $input.all();\nconsole.log(`üîç UPLOAD DEBUG: Received ${allItems.length} items from Cloudinary`);\n\n// Process each item and determine success/failure\nconst results = allItems.map((item, index) => {\n  const data = item.json;\n  console.log(`üì¶ Item ${index + 1}:`);\n  console.log('  Keys:', Object.keys(data));\n  console.log('  Error:', data.error);\n  console.log('  Public ID:', data.public_id);\n  console.log('  Secure URL:', data.secure_url);\n  \n  // Check if upload was successful\n  const isSuccess = !data.error && data.public_id;\n  console.log(`  Success: ${isSuccess}`);\n  \n  return {\n    json: data,\n    success: isSuccess\n  };\n});\n\n// Separate successful and failed uploads\nconst successful = results.filter(r => r.success);\nconst failed = results.filter(r => !r.success);\n\nconsole.log(`üìä UPLOAD SUMMARY:`);\nconsole.log(`  Successful: ${successful.length}`);\nconsole.log(`  Failed: ${failed.length}`);\n\nif (successful.length > 0) {\n  console.log('‚úÖ Sending successful uploads to Log Success');\n  return successful.map(r => ({ json: r.json }));\n} else {\n  console.log('‚ùå No successful uploads - sending to error handling');\n  return failed.map(r => ({ json: r.json }));\n}"
      },
      "id": "8a5d498f-cecd-4571-b8e1-c4fa24da548b",
      "name": "Check Upload Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-480, 0]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.cloudinary.com/v1_1/{{ $json.cloudName }}/auto/upload",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            },
            {
              "name": "upload_preset",
              "value": "n8n_unsigned"
            },
            {
              "name": "public_id",
              "value": "={{ $json.publicId }}"
            },
            {
              "name": "tags",
              "value": "=elevenlabs,episode-01,audio,{{ $json.speaker.toLowerCase() }}"
            }
          ]
        },
        "options": {
          "timeout": 60000
        }
      },
      "id": "b61e60a7-f425-4c8b-9274-b2f2a5ddcd55",
      "name": "Upload to Cloudinary",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-688, 0],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Pass through all input items with proper binary data preservation and filename\nreturn $input.all().map(item => ({\n  json: {\n    ...item.json,\n    publicId: `${item.json.cloudinaryFolder}/${item.json.fileName.replace('.wav', '')}`,\n    uploadReady: true\n  },\n  binary: {\n    data: {\n      ...item.binary.data,\n      fileName: item.json.fileName,\n      mimeType: 'audio/mpeg',\n      // Embed batch control data in binary metadata so it survives upload\n      batchControlData: JSON.stringify({\n        nextStartIndex: item.json.nextStartIndex,\n        hasMoreBatches: item.json.hasMoreBatches,\n        currentBatch: item.json.currentBatch,\n        totalBatches: item.json.totalBatches,\n        totalScriptLines: item.json.totalScriptLines,\n        originalConfig: item.json.originalConfig,\n        originalFileName: item.json.fileName,\n        originalSpeaker: item.json.speaker\n      })\n    }\n  }\n}));"
      },
      "id": "5bc853e4-6ddf-4e0e-b06d-fe0a4633b573",
      "name": "Prepare for Upload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-864, 0]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "success-check",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "d95c0fb3-5b0c-4b8a-b2d4-8b6344e231f5",
      "name": "Check Audio Generation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [-1088, 64]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.elevenlabs.io/v1/text-to-speech/{{ $json.voiceId }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"text\": {{ JSON.stringify($json.text) }},\n  \"model_id\": \"eleven_monolingual_v1\",\n  \"voice_settings\": {\n    \"stability\": 0.5,\n    \"similarity_boost\": 0.5,\n    \"style\": 0.0,\n    \"use_speaker_boost\": true\n  }\n}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          },
          "timeout": 30000
        }
      },
      "id": "7e6fa526-0e96-4102-8df9-9529fe4d5f61",
      "name": "Generate Audio",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [-1280, 64],
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 5000,
      "credentials": {
        "httpHeaderAuth": {
          "id": "olv6Sng3mOQi6H0u",
          "name": "eleven labs Auth account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const current = $input.item.json;\nconsole.log(`üé§ Processing ${current.globalIndex}/${current.totalScriptLines}: ${current.fileName} (${current.speaker})`);\nconsole.log(`üì¶ Batch progress: ${current.itemIndex}/${current.totalItems}`);\nreturn $input.all();"
      },
      "id": "32c59c12-10e4-4137-91d7-e13a9894827c",
      "name": "Log Progress",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1488, 64]
    },
    {
      "parameters": {
        "jsCode": "console.log('üé¨ Loading Distortion Check Episode 1 script...');\nconsole.log('üîê Using N8N credentials for ElevenLabs authentication');\nconsole.log('‚òÅÔ∏è All audio files will be uploaded to Cloudinary');\nconsole.log('üìÅ Cloudinary folder:', $input.item.json.cloudinaryFolder);\nconsole.log('üè∑Ô∏è Cloud name:', $input.item.json.cloudName);\nconsole.log('üî¢ Max items per batch:', $input.item.json.maxItems);\nconsole.log('üéØ Starting from index:', $input.item.json.startIndex);\n\nconst victorVoiceId = $input.item.json.victorVoiceId;\nconst lennyVoiceId = $input.item.json.lennyVoiceId;\nconst cloudinaryFolder = $input.item.json.cloudinaryFolder;\nconst cloudName = $input.item.json.cloudName;\nconst maxItems = $input.item.json.maxItems || 5;\nconst startIndex = $input.item.json.startIndex || 0;\nconst contentSourceType = $input.item.json.contentSourceType || 'static';\nconst contentUrl = $input.item.json.contentUrl;\nconst contentFormat = $input.item.json.contentFormat || 'json';\n\nconsole.log(`üìä Content source: ${contentSourceType}`);\nif (contentSourceType !== 'static' && contentUrl) {\n  console.log(`üåê Content URL: ${contentUrl}`);\n  console.log(`üìÑ Content format: ${contentFormat}`);\n}\n\n// Load content based on source type\nlet scriptLines = [];\n\nif (contentSourceType === 'url' && contentUrl) {\n  console.log('üåê Loading content from remote URL...');\n  \n  try {\n    // Make HTTP request to fetch content\n    const response = await fetch(contentUrl);\n    \n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    \n    let rawContent;\n    if (contentFormat === 'csv') {\n      // Parse CSV content\n      const csvText = await response.text();\n      console.log('üìù Parsing CSV content...');\n      \n      // Simple CSV parser (assumes headers: row,speaker,fileName,text)\n      const lines = csvText.trim().split('\\n');\n      const headers = lines[0].split(',').map(h => h.trim().replace(/\"/g, ''));\n      \n      scriptLines = lines.slice(1).map((line, index) => {\n        const values = [];\n        let current = '';\n        let inQuotes = false;\n        \n        // Parse CSV line handling quoted values\n        for (let i = 0; i < line.length; i++) {\n          const char = line[i];\n          if (char === '\"') {\n            inQuotes = !inQuotes;\n          } else if (char === ',' && !inQuotes) {\n            values.push(current.trim().replace(/\"/g, ''));\n            current = '';\n          } else {\n            current += char;\n          }\n        }\n        values.push(current.trim().replace(/\"/g, ''));\n        \n        const item = {};\n        headers.forEach((header, i) => {\n          item[header] = values[i] || '';\n        });\n        \n        // Convert string row to number if needed\n        if (item.row) item.row = parseInt(item.row) || index + 1;\n        \n        return item;\n      });\n      \n    } else {\n      // Parse JSON content\n      rawContent = await response.json();\n      console.log('üìù Parsing JSON content...');\n      \n      // Handle different JSON structures\n      if (Array.isArray(rawContent)) {\n        scriptLines = rawContent;\n      } else if (rawContent.data && Array.isArray(rawContent.data)) {\n        scriptLines = rawContent.data;\n      } else if (rawContent.content && Array.isArray(rawContent.content)) {\n        scriptLines = rawContent.content;\n      } else {\n        throw new Error('JSON must contain an array or have data/content property with an array');\n      }\n    }\n    \n    console.log(`‚úÖ Loaded ${scriptLines.length} items from remote source`);\n    \n    // Validate required fields\n    const missingFields = [];\n    scriptLines.forEach((item, index) => {\n      if (!item.text) missingFields.push(`Item ${index + 1}: missing 'text'`);\n      if (!item.fileName) missingFields.push(`Item ${index + 1}: missing 'fileName'`);\n      if (!item.speaker) missingFields.push(`Item ${index + 1}: missing 'speaker'`);\n    });\n    \n    if (missingFields.length > 0) {\n      console.error('‚ùå Content validation errors:');\n      missingFields.forEach(error => console.error(`   ${error}`));\n      throw new Error('Content validation failed');\n    }\n    \n  } catch (error) {\n    console.error('‚ùå Failed to load remote content:', error.message);\n    console.error('üîÑ Falling back to static content...');\n    \n    // Fall back to static content\n    scriptLines = getStaticContent();\n  }\n} else {\n  console.log('üìù Using static content...');\n  scriptLines = getStaticContent();\n}\n\n// Static content function\nfunction getStaticContent() {\n  return [\n    {row: 2, speaker: 'Victor', fileName: 'EP01_Victor_ColdOpen_01.wav', text: 'January 15th, 1981. A Tuesday. Louisville, Kentucky. Three people sitting in a living room. One of them, a woman named Carla Rueckert, just left her body. And something else, someone else, started speaking through her.'},\n    {row: 3, speaker: 'Lenny', fileName: 'EP01_Lenny_ColdOpen_02.wav', text: 'For the next three years, this would happen 105 more times. The voice called itself Ra. It claimed to be a social memory complex from the sixth density. And it said it had a message to correct, one it botched 11,000 years ago in Egypt.'},\n    {row: 4, speaker: 'Victor', fileName: 'EP01_Victor_ColdOpen_03.wav', text: 'This is that story. And the wild part? A lot of what Ra said in 1981, we are only now starting to prove.'},\n    {row: 7, speaker: 'Victor', fileName: 'EP01_Victor_Intro_01.wav', text: 'Welcome to Distortion Check: The Ra Material. I am Victor Emil.'},\n    {row: 8, speaker: 'Lenny', fileName: 'EP01_Lenny_Intro_02.wav', text: 'And I am Lenny Peppidge. And if you have never heard of the Ra Material, buckle up. If you have heard of it, we are about to poke at it in ways that might make you uncomfortable. And that is the point.'},\n    {row: 9, speaker: 'Victor', fileName: 'EP01_Victor_Intro_03.wav', text: 'Yeah, we are not here to worship at the altar of Ra. We are also not here to dismiss it as New Age nonsense. We are here to examine it. Critically. With curiosity. And maybe a little bit of that Brooklyn-Boston tension that keeps things honest.'},\n    {row: 10, speaker: 'Lenny', fileName: 'EP01_Lenny_Intro_04.wav', text: 'Victor is from South Brooklyn. I grew up near MIT in Boston. We both love consciousness research, quantum weirdness, and calling out BS when we see it. But we also know that some of the most profound truths sound absolutely insane until they do not.'},\n    {row: 11, speaker: 'Victor', fileName: 'EP01_Victor_Intro_05.wav', text: 'Right. And the Ra Material? It sounded insane in 1981. But here is the thing, a lot of what Ra talked about back then? Consciousness as fundamental to reality. The observer effect in quantum mechanics. The interconnectedness of all things. Non-locality. Time as an illusion.'},\n    {row: 12, speaker: 'Lenny', fileName: 'EP01_Lenny_Intro_06.wav', text: 'That stuff was not mainstream in 81. Now? It is showing up in peer-reviewed journals. So either Ra was a really good guesser, or something else was going on.'},\n    {row: 13, speaker: 'Victor', fileName: 'EP01_Victor_Intro_07.wav', text: 'Over the next however-many episodes this takes, because there are 106 sessions, we are going to walk through this material. Session by session. We are going to challenge it. Question it. See where it holds up and where it falls apart.'},\n    {row: 14, speaker: 'Lenny', fileName: 'EP01_Lenny_Intro_08.wav', text: 'And we are going to do it with respect for the three people who risked everything to bring this through. Because whatever you believe about channeling, about Ra, about any of this, Don Elkins, Carla Rueckert, and Jim McCarty were serious people doing serious work.'},\n    {row: 15, speaker: 'Victor', fileName: 'EP01_Victor_Intro_09.wav', text: 'So. Let us start at the beginning. Who were these three people? How did they end up in a living room in Louisville, talking to an alleged extraterrestrial intelligence? And what happened on January 15th, 1981, that changed everything?'},\n    {row: 16, speaker: 'Lenny', fileName: 'EP01_Lenny_Intro_10.wav', text: 'Let us boil it down.'},\n    {row: 17, speaker: 'Victor', fileName: 'EP01_Victor_ActOne_01.wav', text: 'Alright. Don Elkins. Physics professor. Airline pilot. UFO researcher. This guy was not some fringe weirdo. He taught at the University of Louisville. He flew commercial jets. And he was obsessed, obsessed, with one question: Are we alone?'},\n    {row: 18, speaker: 'Lenny', fileName: 'EP01_Lenny_ActOne_02.wav', text: 'And not in a little green men way. Don wanted to understand consciousness. He wanted to know if there were intelligences out there more advanced than us, and if so, what they knew that we did not.'},\n    {row: 19, speaker: 'Victor', fileName: 'EP01_Victor_ActOne_03.wav', text: 'In 1962, almost 20 years before the Ra contact, Don started experimenting with channeling. And I know, I know, channeling sounds like s√©ance-table nonsense. But here is the thing: Don approached it like a scientist. He was not trying to talk to dead relatives. He was trying to establish contact with non-human intelligence.'},\n    {row: 20, speaker: 'Lenny', fileName: 'EP01_Lenny_ActOne_04.wav', text: 'And he was meticulous. He recorded everything. He tested protocols. He refined the process. For years. And most of what came through? Introductory stuff. Basic metaphysical concepts. Nothing groundbreaking.'},\n    {row: 21, speaker: 'Victor', fileName: 'EP01_Victor_ActOne_05.wav', text: 'Enter Carla Rueckert. Carla met Don in 1962 at one of his channeling experiments. She was a librarian. Deeply spiritual. Kind of ethereal, from what I have read. And she had a gift for this work.'},\n    {row: 22, speaker: 'Lenny', fileName: 'EP01_Lenny_ActOne_06.wav', text: 'Don recognized it immediately. In 1974, twelve years after they met, he asked Carla to become the primary channel for their research group, which they called L/L Research.'},\n    {row: 23, speaker: 'Victor', fileName: 'EP01_Victor_ActOne_07.wav', text: 'And this is where it gets interesting. Up until this point, all of Carla channeling was conscious. Meaning she was aware of what was coming through her. She could hear it, remember it, even question it in real time.'},\n    {row: 24, speaker: 'Lenny', fileName: 'EP01_Lenny_ActOne_08.wav', text: 'But the quality of the material jumped once Carla took over. She refined Don protocols. She developed what they called tuning the instrument, basically getting into a meditative state that made the channel clearer, more stable.'},\n    {row: 25, speaker: 'Victor', fileName: 'EP01_Victor_ActOne_09.wav', text: 'Now. Third member of the trio: Jim McCarty. Jim was living off the grid in rural Kentucky in 1978. Built his own log cabin. 132 acres. No electricity. Just him, the woods, and a battery-powered radio.'},\n    {row: 26, speaker: 'Lenny', fileName: 'EP01_Lenny_ActOne_10.wav', text: 'One night, he is listening to this radio station out of Lexington, and he hears an interview with Don and Carla talking about UFOs. And something about it just clicked for him. He thought, I need to meet these people.'},\n    {row: 27, speaker: 'Victor', fileName: 'EP01_Victor_ActOne_11.wav', text: 'A year later, he does. Mutual friends introduce them. Jim starts driving to Louisville every Sunday night, an hour each way, to attend their channeling meditations. He does this for a year.'},\n    {row: 28, speaker: 'Lenny', fileName: 'EP01_Lenny_ActOne_12.wav', text: 'And then, in December 1980, Don and Carla invite him to move in and help with the research full-time. Jim arrives on December 23rd, 1980.'},\n    {row: 29, speaker: 'Victor', fileName: 'EP01_Victor_ActOne_13.wav', text: 'Twenty-three days later, everything changes.'},\n    {row: 31, speaker: 'Lenny', fileName: 'EP01_Lenny_ActOne_14.wav', text: 'January 15th, 1981. Carla is teaching a student how to channel. It is a normal session. Conscious channeling, like she had done hundreds of times before.'},\n    {row: 33, speaker: 'Victor', fileName: 'EP01_Victor_ActOne_15.wav', text: 'And then a voice comes through her and says, I am Ra.'},\n    {row: 34, speaker: 'Lenny', fileName: 'EP01_Lenny_ActOne_16.wav', text: 'And Carla leaves. Not the room. Her body. She goes completely unconscious. And this voice, Ra, starts speaking through her in a way that is mechanically operating her vocal cords.'}\n  ];\n}"
      },
      "id": "11cf2d53-8eaf-4002-b96b-37ed6486287c",
      "name": "Load Script Lines (Rate Limited)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1856, 64]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "voice-victor",
              "name": "victorVoiceId",
              "value": "T9xTMubBGC4Y9y6oHUza",
              "type": "string"
            },
            {
              "id": "voice-lenny",
              "name": "lennyVoiceId",
              "value": "WbI4Toj5UDP91WAiEInp",
              "type": "string"
            },
            {
              "id": "cloudinary-folder",
              "name": "cloudinaryFolder",
              "value": "elevenlabs-audio/episode-01",
              "type": "string"
            },
            {
              "id": "cloudinary-cloud-name",
              "name": "cloudName",
              "value": "dly199qqv",
              "type": "string"
            },
            {
              "id": "rate-limit",
              "name": "maxItems",
              "value": 5,
              "type": "number"
            },
            {
              "id": "start-index",
              "name": "startIndex",
              "value": 0,
              "type": "number"
            },
            {
              "id": "content-source-type",
              "name": "contentSourceType",
              "value": "url",
              "type": "string"
            },
            {
              "id": "content-url",
              "name": "contentUrl",
              "value": "https://raw.githubusercontent.com/your-username/your-repo/main/docs/distortion-check-ep1.json",
              "type": "string"
            },
            {
              "id": "content-format",
              "name": "contentFormat",
              "value": "json",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "8afea632-9e31-4d6e-98ea-2adf55c8bf1d",
      "name": "Set Configuration",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [-2080, 64]
    },
    {
      "parameters": {},
      "id": "b8280a5f-58db-4af7-ba0c-2b2a4bde71a2",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [-2288, 64]
    }
  ],
  "pinData": {},
  "connections": {
    "Batch Completion Check": {
      "main": [
        [
          {
            "node": "Debug More Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug False Path": {
      "main": [
        [
          {
            "node": "Final Completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setup Next Batch": {
      "main": [
        [
          {
            "node": "Load Script Lines (Rate Limited)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug True Path": {
      "main": [
        [
          {
            "node": "Setup Next Batch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "More Batches?": {
      "main": [
        [
          {
            "node": "Debug True Path",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Debug False Path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug More Batches": {
      "main": [
        [
          {
            "node": "More Batches?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Success": {
      "main": [
        [
          {
            "node": "Batch Completion Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Upload Success": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to Cloudinary": {
      "main": [
        [
          {
            "node": "Check Upload Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare for Upload": {
      "main": [
        [
          {
            "node": "Upload to Cloudinary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Audio Generation": {
      "main": [
        [
          {
            "node": "Prepare for Upload",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Audio Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Audio": {
      "main": [
        [
          {
            "node": "Check Audio Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Progress": {
      "main": [
        [
          {
            "node": "Generate Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Script Lines (Rate Limited)": {
      "main": [
        [
          {
            "node": "Log Progress",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Configuration": {
      "main": [
        [
          {
            "node": "Load Script Lines (Rate Limited)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Start": {
      "main": [
        [
          {
            "node": "Set Configuration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveDataErrorExecution": "all",
    "saveDataSuccessExecution": "all",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "",
    "timezone": "America/New_York"
  },
  "versionId": "5cf1f1cb-3001-443a-a47b-bcbeffbd056f",
  "meta": {
    "instanceId": "5186b157db49ce82dd76d1b42490f93bc5ac8ef6b8080d76da5a801058b2bcaa"
  },
  "id": "Vgv8ZfBDayuMwSau",
  "tags": []
}
