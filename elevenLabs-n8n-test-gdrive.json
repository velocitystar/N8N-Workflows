{
  "name": "ElevenLabs Test with Google Drive Upload",
  "nodes": [
    {
      "parameters": {},
      "id": "start-node",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "voice-victor",
              "name": "victorVoiceId",
              "value": "T9xTMubBGC4Y9y6oHUza",
              "type": "string"
            },
            {
              "id": "voice-lenny",
              "name": "lennyVoiceId",
              "value": "WbI4Toj5UDP91WAiEInp",
              "type": "string"
            },
            {
              "id": "test-text",
              "name": "text",
              "value": "This is a test of the ElevenLabs voice generation system with Google Drive upload. If you can hear this clearly, the integration is working perfectly.",
              "type": "string"
            },
            {
              "id": "gdrive-folder-id",
              "name": "gdriveFolderId",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "set-variables",
      "name": "Set Variables",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [450, 300]
    },
    {
      "parameters": {
        "jsCode": "console.log('üîê Using N8N credentials for ElevenLabs authentication');\nconsole.log('‚òÅÔ∏è Files will be uploaded to Google Drive');\nconsole.log('üé§ Using Victor voice for test');\nconsole.log('üìù Test text:', $input.item.json.text);\n\nif (!$input.item.json.gdriveFolderId) {\n  console.log('üìÅ No specific folder ID set - will upload to Drive root');\n} else {\n  console.log('üìÅ Will upload to Google Drive folder ID:', $input.item.json.gdriveFolderId);\n}\n\nreturn $input.all();"
      },
      "id": "validate-setup",
      "name": "Log Setup Info",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.elevenlabs.io/v1/text-to-speech/{{ $json.victorVoiceId }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"text\": {{ JSON.stringify($json.text) }},\n  \"model_id\": \"eleven_monolingual_v1\",\n  \"voice_settings\": {\n    \"stability\": 0.5,\n    \"similarity_boost\": 0.5,\n    \"style\": 0.0,\n    \"use_speaker_boost\": true\n  }\n}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          },
          "timeout": 30000
        }
      },
      "id": "generate-audio",
      "name": "Generate Audio",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [850, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "elevenlabs_api_credential",
          "name": "ElevenLabs API Key"
        }
      },
      "continueOnFail": true,
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 2000
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "success-check",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-audio-success",
      "name": "Check Audio Generation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "jsCode": "// Prepare the file for Google Drive upload\nconst timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);\nconst fileName = `test_audio_${timestamp}.wav`;\n\nconsole.log('üéµ Audio generated successfully, preparing for Google Drive upload');\nconsole.log('üìÑ File name:', fileName);\n\n// Add filename to the data for the next node\nreturn [{\n  json: {\n    ...($input.item.json || {}),\n    fileName: fileName,\n    uploadReady: true\n  },\n  binary: {\n    data: $input.item.binary.data\n  }\n}];"
      },
      "id": "prepare-upload",
      "name": "Prepare for Upload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 240]
    },
    {
      "parameters": {
        "operation": "upload",
        "fileId": {
          "__rl": true,
          "value": "",
          "mode": "list",
          "cachedResultName": ""
        },
        "name": "={{ $json.fileName }}",
        "resolveData": true,
        "parents": {
          "__rl": true,
          "value": "={{ $json.gdriveFolderId }}",
          "mode": "id"
        },
        "options": {}
      },
      "id": "upload-to-gdrive",
      "name": "Upload to Google Drive",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [1450, 240],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "google_drive_credential",
          "name": "Google Drive"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const fileData = $input.item.json;\nconst fileName = fileData.name || fileData.fileName;\nconst fileId = fileData.id;\nconst webViewLink = fileData.webViewLink;\nconst webContentLink = fileData.webContentLink;\n\nconsole.log('üéâ SUCCESS! Audio file uploaded to Google Drive!');\nconsole.log('üìÑ File name:', fileName);\nconsole.log('üÜî Google Drive file ID:', fileId);\nconsole.log('üîó View link:', webViewLink);\nconsole.log('üì• Download link:', webContentLink);\nconsole.log('‚úÖ ElevenLabs + Google Drive integration working perfectly!');\n\nreturn [{ \n  json: { \n    success: true, \n    message: 'Test completed successfully with Google Drive upload',\n    fileName: fileName,\n    googleDriveFileId: fileId,\n    viewLink: webViewLink,\n    downloadLink: webContentLink,\n    authMethod: 'N8N HTTP Header Auth + Google Drive OAuth2',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "log-success",
      "name": "Log Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1650, 240]
    },
    {
      "parameters": {
        "jsCode": "const error = $input.item.json.error || {};\nconst statusCode = error.httpCode || 'unknown';\nconst message = error.message || 'Unknown error occurred';\n\nconsole.error('‚ùå AUDIO GENERATION FAILED!');\nconsole.error('Status Code:', statusCode);\nconsole.error('Error Message:', message);\n\n// Common error explanations\nif (statusCode === 401) {\n  console.error('üîë This is likely a credential issue:');\n  console.error('   - Check that your ElevenLabs API credential is set up correctly');\n  console.error('   - Verify the API key is valid and active');\n} else if (statusCode === 429) {\n  console.error('‚è±Ô∏è Rate limit exceeded. Wait a moment and try again.');\n} else if (statusCode === 400) {\n  console.error('üìù Bad request - check your voice ID or text content.');\n} else if (statusCode === 422) {\n  console.error('üé§ Voice ID may be invalid or voice settings are incorrect.');\n} else if (statusCode === 403) {\n  console.error('üö´ Forbidden - check your ElevenLabs account status.');\n}\n\nreturn [{ \n  json: { \n    success: false, \n    error: message,\n    statusCode: statusCode,\n    stage: 'audio_generation',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "log-audio-error",
      "name": "Log Audio Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 360]
    },
    {
      "parameters": {
        "jsCode": "const error = $input.item.json.error || {};\nconst message = error.message || 'Google Drive upload failed';\n\nconsole.error('‚ùå GOOGLE DRIVE UPLOAD FAILED!');\nconsole.error('Error Message:', message);\nconsole.error('üí° Troubleshooting tips:');\nconsole.error('   1. Check your Google Drive credential is properly configured');\nconsole.error('   2. Ensure you have write permissions to the target folder');\nconsole.error('   3. Verify the folder ID is correct (if specified)');\nconsole.error('   4. Check your Google Drive storage quota');\n\nreturn [{ \n  json: { \n    success: false, \n    error: message,\n    stage: 'google_drive_upload',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "log-upload-error",
      "name": "Log Upload Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1650, 360],
      "continueOnFail": true
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Set Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Variables": {
      "main": [
        [
          {
            "node": "Log Setup Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Setup Info": {
      "main": [
        [
          {
            "node": "Generate Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Audio": {
      "main": [
        [
          {
            "node": "Check Audio Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Audio Generation": {
      "main": [
        [
          {
            "node": "Prepare for Upload",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Audio Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare for Upload": {
      "main": [
        [
          {
            "node": "Upload to Google Drive",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to Google Drive": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Log Upload Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {}
}
