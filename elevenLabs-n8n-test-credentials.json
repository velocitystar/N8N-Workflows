{
  "name": "ElevenLabs Simple Test (Credentials)",
  "nodes": [
    {
      "parameters": {},
      "id": "start-node",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "voice-victor",
              "name": "victorVoiceId",
              "value": "T9xTMubBGC4Y9y6oHUza",
              "type": "string"
            },
            {
              "id": "voice-lenny",
              "name": "lennyVoiceId",
              "value": "WbI4Toj5UDP91WAiEInp",
              "type": "string"
            },
            {
              "id": "test-text",
              "name": "text",
              "value": "This is a test of the ElevenLabs voice generation system using N8N credentials. If you can hear this clearly, the credential-based authentication is working perfectly.",
              "type": "string"
            },
            {
              "id": "output-folder",
              "name": "outputFolder",
              "value": "./audio_test",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "set-variables",
      "name": "Set Variables",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [450, 300]
    },
    {
      "parameters": {
        "jsCode": "console.log('‚úÖ Using N8N credentials for authentication');\nconsole.log('üé§ Using Victor voice for test');\nconsole.log('üìù Test text:', $input.item.json.text);\nconsole.log('üìÅ Output folder:', $input.item.json.outputFolder);\n\nreturn $input.all();"
      },
      "id": "validate-setup",
      "name": "Log Setup Info",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.elevenlabs.io/v1/text-to-speech/{{ $json.victorVoiceId }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"text\": {{ JSON.stringify($json.text) }},\n  \"model_id\": \"eleven_monolingual_v1\",\n  \"voice_settings\": {\n    \"stability\": 0.5,\n    \"similarity_boost\": 0.5,\n    \"style\": 0.0,\n    \"use_speaker_boost\": true\n  }\n}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          },
          "timeout": 30000
        }
      },
      "id": "http-request",
      "name": "Generate Test Audio",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [850, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "elevenlabs_api_credential",
          "name": "ElevenLabs API Key"
        }
      },
      "continueOnFail": true,
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 2000
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "success-check",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-success",
      "name": "Check Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $json.outputFolder }}/test_audio_{{ $now.format('YYYY-MM-DD_HH-mm-ss') }}.wav",
        "dataPropertyName": "data"
      },
      "id": "save-test-file",
      "name": "Save Test Audio",
      "type": "n8n-nodes-base.writeBinaryFile",
      "typeVersion": 1,
      "position": [1250, 240]
    },
    {
      "parameters": {
        "jsCode": "const fileName = $json.outputFolder + '/test_audio_' + new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19) + '.wav';\n\nconsole.log('üéâ SUCCESS! Test audio generated successfully!');\nconsole.log('üîê N8N credentials authentication working perfectly!');\nconsole.log('üìÅ File saved to:', fileName);\nconsole.log('üîä You can now play the audio file to verify it sounds correct.');\nconsole.log('‚úÖ ElevenLabs API integration is working!');\n\nreturn [{ json: { \n  success: true, \n  message: 'Test completed successfully with N8N credentials',\n  fileName: fileName,\n  authMethod: 'N8N HTTP Header Auth Credentials',\n  timestamp: new Date().toISOString()\n}}];"
      },
      "id": "log-success",
      "name": "Log Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1450, 240]
    },
    {
      "parameters": {
        "jsCode": "const error = $input.item.json.error || {};\nconst statusCode = error.httpCode || 'unknown';\nconst message = error.message || 'Unknown error occurred';\n\nconsole.error('‚ùå TEST FAILED!');\nconsole.error('Status Code:', statusCode);\nconsole.error('Error Message:', message);\n\n// Common error explanations\nif (statusCode === 401) {\n  console.error('üîë This is likely a credential issue:');\n  console.error('   - Check that your ElevenLabs API credential is set up correctly');\n  console.error('   - Verify the API key is valid and active');\n  console.error('   - Make sure the credential is selected in the HTTP Request node');\n} else if (statusCode === 429) {\n  console.error('‚è±Ô∏è Rate limit exceeded. Wait a moment and try again.');\n} else if (statusCode === 400) {\n  console.error('üìù Bad request - check your voice ID or text content.');\n} else if (statusCode === 422) {\n  console.error('üé§ Voice ID may be invalid or voice settings are incorrect.');\n} else if (statusCode === 403) {\n  console.error('üö´ Forbidden - check your ElevenLabs account status and API permissions.');\n}\n\nconsole.error('üí° Troubleshooting tips:');\nconsole.error('   1. Go to Credentials in N8N and verify your ElevenLabs API key');\nconsole.error('   2. Test the API key directly in ElevenLabs dashboard');\nconsole.error('   3. Check that the credential is properly selected in the HTTP Request node');\n\nreturn [{ json: { \n  success: false, \n  error: message,\n  statusCode: statusCode,\n  authMethod: 'N8N HTTP Header Auth Credentials',\n  timestamp: new Date().toISOString()\n}}];"
      },
      "id": "log-error",
      "name": "Log Error Details",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 360]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Set Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Variables": {
      "main": [
        [
          {
            "node": "Log Setup Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Setup Info": {
      "main": [
        [
          {
            "node": "Generate Test Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Test Audio": {
      "main": [
        [
          {
            "node": "Check Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Success": {
      "main": [
        [
          {
            "node": "Save Test Audio",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Error Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Test Audio": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {}
}
