{
  "name": "ElevenLabs Test with Cloudinary Upload (Fixed Auth)",
  "nodes": [
    {
      "parameters": {},
      "id": "start-node",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "voice-victor",
              "name": "victorVoiceId",
              "value": "T9xTMubBGC4Y9y6oHUza",
              "type": "string"
            },
            {
              "id": "voice-lenny",
              "name": "lennyVoiceId",
              "value": "WbI4Toj5UDP91WAiEInp",
              "type": "string"
            },
            {
              "id": "test-text",
              "name": "text",
              "value": "This is a test of the ElevenLabs voice generation system with Cloudinary upload. If you can hear this clearly, the integration is working perfectly.",
              "type": "string"
            },
            {
              "id": "cloudinary-folder",
              "name": "cloudinaryFolder",
              "value": "elevenlabs-audio/tests",
              "type": "string"
            },
            {
              "id": "cloudinary-cloud-name",
              "name": "cloudName",
              "value": "your-cloud-name-here",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "set-variables",
      "name": "Set Variables",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [450, 300]
    },
    {
      "parameters": {
        "jsCode": "console.log('üîê Using N8N credentials for ElevenLabs authentication');\nconsole.log('‚òÅÔ∏è Files will be uploaded to Cloudinary');\nconsole.log('üé§ Using Victor voice for test');\nconsole.log('üìù Test text:', $input.item.json.text);\nconsole.log('üìÅ Cloudinary folder:', $input.item.json.cloudinaryFolder);\nconsole.log('üè∑Ô∏è Cloud name:', $input.item.json.cloudName);\n\nif ($input.item.json.cloudName === 'your-cloud-name-here') {\n  console.warn('‚ö†Ô∏è WARNING: Please update the cloudName in Set Variables node with your actual Cloudinary cloud name!');\n}\n\nreturn $input.all();"
      },
      "id": "log-setup",
      "name": "Log Setup Info",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.elevenlabs.io/v1/text-to-speech/{{ $json.victorVoiceId }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"text\": {{ JSON.stringify($json.text) }},\n  \"model_id\": \"eleven_monolingual_v1\",\n  \"voice_settings\": {\n    \"stability\": 0.5,\n    \"similarity_boost\": 0.5,\n    \"style\": 0.0,\n    \"use_speaker_boost\": true\n  }\n}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          },
          "timeout": 30000
        }
      },
      "id": "generate-audio",
      "name": "Generate Audio",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [850, 300],
      "credentials": {
        "httpHeaderAuth": {
          "id": "elevenlabs_api_credential",
          "name": "ElevenLabs API Key"
        }
      },
      "continueOnFail": true,
      "retryOnFail": true,
      "maxTries": 3,
      "waitBetweenTries": 2000
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "success-check",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-audio-success",
      "name": "Check Audio Generation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "jsCode": "// Prepare the file for Cloudinary upload\nconst timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, 19);\nconst fileName = `test_audio_${timestamp}`;\nconst publicId = `${$input.item.json.cloudinaryFolder}/${fileName}`;\n\nconsole.log('üéµ Audio generated successfully, preparing for Cloudinary upload');\nconsole.log('üìÑ File name:', fileName + '.wav');\nconsole.log('üÜî Cloudinary public ID:', publicId);\n\n// Convert binary data to base64 for Cloudinary\nconst binaryData = $input.item.binary.data;\nconst base64Data = binaryData.data;\n\nreturn [{\n  json: {\n    ...($input.item.json || {}),\n    fileName: fileName + '.wav',\n    publicId: publicId,\n    uploadReady: true,\n    fileData: `data:audio/wav;base64,${base64Data}`\n  }\n}];"
      },
      "id": "prepare-upload",
      "name": "Prepare for Upload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 240]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.cloudinary.com/v1_1/{{ $json.cloudName }}/video/upload",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"file\": {{ JSON.stringify($json.fileData) }},\n  \"public_id\": {{ JSON.stringify($json.publicId) }},\n  \"resource_type\": \"video\",\n  \"format\": \"wav\",\n  \"overwrite\": true,\n  \"eager\": [\n    {\n      \"format\": \"mp3\",\n      \"quality\": \"auto\"\n    }\n  ],\n  \"tags\": [\"elevenlabs\", \"test\", \"audio\"]\n}",
        "options": {
          "timeout": 60000
        }
      },
      "id": "upload-to-cloudinary",
      "name": "Upload to Cloudinary",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1450, 240],
      "credentials": {
        "httpHeaderAuth": {
          "id": "cloudinary_api_credential",
          "name": "Cloudinary API Auth"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "upload-success-check",
              "leftValue": "={{ $json.error }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-upload-success",
      "name": "Check Upload Success",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1650, 240]
    },
    {
      "parameters": {
        "jsCode": "const uploadResult = $input.item.json;\nconst publicId = uploadResult.public_id;\nconst secureUrl = uploadResult.secure_url;\nconst originalFileName = uploadResult.original_filename || 'test_audio';\nconst format = uploadResult.format;\nconst resourceType = uploadResult.resource_type;\nconst bytes = uploadResult.bytes;\nconst duration = uploadResult.duration;\n\nconsole.log('üéâ SUCCESS! Audio file uploaded to Cloudinary!');\nconsole.log('üìÑ Original file name:', originalFileName + '.' + format);\nconsole.log('üÜî Cloudinary public ID:', publicId);\nconsole.log('üîó Secure URL:', secureUrl);\nconsole.log('üìä File size:', Math.round(bytes / 1024) + ' KB');\nif (duration) {\n  console.log('‚è±Ô∏è Duration:', Math.round(duration) + ' seconds');\n}\nconsole.log('‚úÖ ElevenLabs + Cloudinary integration working perfectly!');\n\n// Check if eager transformations were created\nif (uploadResult.eager && uploadResult.eager.length > 0) {\n  console.log('üîÑ Available formats:');\n  uploadResult.eager.forEach(eager => {\n    console.log(`   - ${eager.format}: ${eager.secure_url}`);\n  });\n}\n\nreturn [{ \n  json: { \n    success: true, \n    message: 'Test completed successfully with Cloudinary upload',\n    fileName: originalFileName + '.' + format,\n    cloudinaryPublicId: publicId,\n    secureUrl: secureUrl,\n    fileSize: Math.round(bytes / 1024) + ' KB',\n    duration: duration ? Math.round(duration) + 's' : 'N/A',\n    availableFormats: uploadResult.eager ? uploadResult.eager.map(e => e.format) : ['wav'],\n    authMethod: 'N8N HTTP Header Auth + Cloudinary Basic Auth',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "log-success",
      "name": "Log Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1850, 180]
    },
    {
      "parameters": {
        "jsCode": "const error = $input.item.json.error || {};\nconst statusCode = error.httpCode || 'unknown';\nconst message = error.message || 'Unknown error occurred';\n\nconsole.error('‚ùå AUDIO GENERATION FAILED!');\nconsole.error('Status Code:', statusCode);\nconsole.error('Error Message:', message);\n\n// Common error explanations\nif (statusCode === 401) {\n  console.error('üîë This is likely a credential issue:');\n  console.error('   - Check that your ElevenLabs API credential is set up correctly');\n  console.error('   - Verify the API key is valid and active');\n} else if (statusCode === 429) {\n  console.error('‚è±Ô∏è Rate limit exceeded. Wait a moment and try again.');\n} else if (statusCode === 400) {\n  console.error('üìù Bad request - check your voice ID or text content.');\n} else if (statusCode === 422) {\n  console.error('üé§ Voice ID may be invalid or voice settings are incorrect.');\n} else if (statusCode === 403) {\n  console.error('üö´ Forbidden - check your ElevenLabs account status.');\n}\n\nreturn [{ \n  json: { \n    success: false, \n    error: message,\n    statusCode: statusCode,\n    stage: 'audio_generation',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "log-audio-error",
      "name": "Log Audio Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 360]
    },
    {
      "parameters": {
        "jsCode": "const error = $input.item.json.error || {};\nconst statusCode = error.httpCode || 'unknown';\nconst message = error.message || 'Cloudinary upload failed';\n\nconsole.error('‚ùå CLOUDINARY UPLOAD FAILED!');\nconsole.error('Status Code:', statusCode);\nconsole.error('Error Message:', message);\n\n// Common Cloudinary error explanations\nif (statusCode === 401) {\n  console.error('üîë Authentication failed:');\n  console.error('   - Check your Cloudinary API credential is properly configured');\n  console.error('   - Verify the Authorization header format: Basic base64(api_key:api_secret)');\n  console.error('   - Make sure API key and secret are correct from Cloudinary dashboard');\n} else if (statusCode === 400) {\n  console.error('üìù Bad request:');\n  console.error('   - Check the file format is supported');\n  console.error('   - Verify the public_id format is valid');\n  console.error('   - Ensure the base64 data is properly formatted');\n  console.error('   - Make sure cloud name is correct in the URL');\n} else if (statusCode === 420) {\n  console.error('üìä Rate limit or quota exceeded');\n} else if (statusCode === 500) {\n  console.error('üîß Cloudinary server error - try again later');\n}\n\nconsole.error('üí° Troubleshooting tips:');\nconsole.error('   1. Check your Cloudinary API credential (HTTP Header Auth)');\nconsole.error('   2. Verify cloud name is correct in Set Variables node');\nconsole.error('   3. Ensure API key and secret are base64 encoded correctly');\nconsole.error('   4. Check Cloudinary dashboard for account status');\n\nreturn [{ \n  json: { \n    success: false, \n    error: message,\n    statusCode: statusCode,\n    stage: 'cloudinary_upload',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "log-upload-error",
      "name": "Log Upload Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1850, 300]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Set Variables",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Variables": {
      "main": [
        [
          {
            "node": "Log Setup Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Setup Info": {
      "main": [
        [
          {
            "node": "Generate Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Audio": {
      "main": [
        [
          {
            "node": "Check Audio Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Audio Generation": {
      "main": [
        [
          {
            "node": "Prepare for Upload",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Audio Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare for Upload": {
      "main": [
        [
          {
            "node": "Upload to Cloudinary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to Cloudinary": {
      "main": [
        [
          {
            "node": "Check Upload Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Upload Success": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Upload Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {}
}
